(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{37:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(6),o=n(1),l=(n(38),function(e,t){return e?i.a.createElement(r.c,{className:"btn",to:Object(o.b)(e).path},t):i.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return i.a.createElement("div",{className:"navs"},i.a.createElement("span",{className:"left"},l(e.prev,"Previous")),i.a.createElement("span",{className:"right"},l(e.next,"Next")))}},38:function(e,t,n){},39:function(e,t,n){"use strict";var a=n(8),i=n(0),r=n.n(i),o=(n(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),l=["Override"],c=function(e){return e=function(e){var t=e;return l.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return o.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e=function(e){for(var t="",n=!0,a=0;a<e.length;a++)"\n"===e[a]?(t+="<br>",n=!0):n&&" "===e[a]?t+="&nbsp;":(n=!1,t+=e[a]);return t}(e=function(e){var t=e,n=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(n){var i=Object(a.a)(n);i.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e))))};t.a=function(e){var t={__html:"<div id='pre'>"+c(e.code)+"</div>"};return r.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,n){},53:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(37),o=n(39);t.default=function(){return i.a.createElement("div",{className:"main"},i.a.createElement("div",{className:"pageTitle"},"Other Damage Types"),i.a.createElement("p",null,"Till now I have been blabbering about Hits and damage that it has on the fighter who gets hit. These are physical in nature."),i.a.createElement("p",null,"A Punch or Kick causes physical damage to the opponent."),i.a.createElement("p",null,"Here I will branch out into more forms of damage."),i.a.createElement("p",null,i.a.createElement("em",null,"Why?")," Because that gives out some additional variety and opens up new interesting set of fighters."),i.a.createElement("div",{className:"sectionTitle"},"Fire Damage"),i.a.createElement("p",null,"This type of damage, along with the initial damage at impact, also adds a burn damage."),i.a.createElement("p",null,i.a.createElement("em",null,"What's burn damage?")),i.a.createElement("p",null,"It's additional damage over time. So after the initial impact, for next n number of beats, the fighter keeps on taking additional damage (burning)."),i.a.createElement("p",null,i.a.createElement("em",null,"Implementation?")," Again thanks to the Observer system that is in place now, it's a piece of cake."),i.a.createElement("p",null,"To burn, an Observer is registered to the fighter, which at each update decrements the life of the affected fighter."),i.a.createElement("p",null,"At nth beat, the Observer unregisters itself from the fighter."),i.a.createElement("p",null,"Think of if as an opposite to the life Restorer concept, only with an expiry attached to it."),i.a.createElement(o.a,{code:"\n\n  public interface Move {\n    void affect(Fighter fighter);\n  }\n\n  public class FireDamage implements Move, BeatObserver {\n    double damage;\n    int burnDuration;\n    double burnDamage;\n\n    Fighter fighter;\n    int beatCount;\n\n    public FireDamage(double damage, int duration, double burnDamage) {\n      this.damage = damage;\n      this.burnDuration = duration;\n      this.burnDamage = burnDamage;\n    }\n\n    @Override\n    public void affect(Fighter fighter) {\n      this.fighter = fighter;\n      this.fighter.getLife().incrementCurrent(-damage);\n      this.fighter.registerObserver(this);\n    }\n\n    @Override\n    public void update() {\n      if (beatCount == burnDuration) {\n        this.fighter.unregisterObserver(this);\n      } else {\n        this.fighter.getLife().incrementCurrent(-burnDamage/burnDuration);\n        beatCount++;\n      }\n    }\n\n  }\n\n  // setting it up\n  FireDamage fire = new FireDamage(damage, duration, burnDamage);\n  fire.affect(fighter);\n\n"}),i.a.createElement("div",{className:"sectionTitle"},"Cold Damage"),i.a.createElement("p",null,"This type of damage chills the opponent along with the initial damage at impact. The effect of chill is that the fighter is slowed down."),i.a.createElement("p",null,i.a.createElement("em",null,"How do I slow down a fighter?")),i.a.createElement("p",null,"The fighter's rhythm is a function of the property Dexterity. So all I need to do is lower the dexterity at impact and restore it after the duration of effect is over."),i.a.createElement("p",null,"Observer to the rescue! ",i.a.createElement("em",null,"Again!!")),i.a.createElement(o.a,{code:"\n\n  public class ColdDamage implements Move, BeatObserver {\n    double damage;\n    int chillDuration;\n    double reduceDexterity;\n\n    Fighter fighter;\n    int beatCount;\n\n    ...\n\n    @Override\n    public void affect(Fighter fighter) {\n      this.fighter = fighter;\n      this.fighter.getLife().incrementCurrent(-damage);\n      this.fighter.getDexterity().increment(-reduceDexterity);\n      this.fighter.registerObserver(this);\n    }\n\n    @Override\n    public void update() {\n      if (beatCount == chillDuration) {\n        this.fighter.getDexterity().increment(reduceDexterity); // restore\n        this.fighter.unregisterObserver(this);\n      } else {\n        beatCount++;\n      }\n    }\n\n  }\n\n"}),i.a.createElement("div",{className:"sectionTitle"},"Shock Damage"),i.a.createElement("p",null,i.a.createElement("em",null,"What is a shock?")),i.a.createElement("p",null,"That which renders the fighter offenseless and defenseless."),i.a.createElement("p",null,"I hijack the Action and Reaction Strategy at impact and return it after the duration is over."),i.a.createElement("p",null,"Observer + Strategy."),i.a.createElement(o.a,{code:"\n\n  public class ShockedActionStrategy implements ActionStrategy {\n    ActionStrategy originalAction;\n    boolean blocked;\n\n    public ShockedActionStrategy(ActionStrategy originalAction) {\n      this.originalAction = originalAction;\n      this.blocked = true;\n    }\n\n    @Override\n    public void perform() {\n      if (!blocked) {\n        originalAction.perform();\n      }\n    }\n\n    public void unblock() {\n      this.blocked = false;\n    }\n\n  }\n\n  public class ShockedReactionStrategy implements ReactionStrategy {\n    ReactionStrategy originalReaction;\n    boolean blocked;\n\n    ...\n\n    @Override\n    public void perform(Move move) {\n      if (!blocked) {\n        return originalReaction.perform(move);\n      }\n      return false;\n    }\n\n    ...\n\n  }\n\n  public class ShockDamage implements Move, BeatObserver {\n    double damage;\n    int shockDuration;\n\n    Fighter fighter;\n    int beatCount;\n    ShockedActionStrategy shockAction;\n    ShockedReactionStrategy shockReaction;\n\n    ...\n\n    @Override\n    public void affect(Fighter fighter) {\n      this.fighter = fighter;\n      this.fighter.getLife().incrementCurrent(-damage);\n      shockAction = new ShockedActionStrategy(this.fighter.getActionStrategy());\n      this.fighter.setActionStrategy(shockAction);\n      shockReaction = new ShockedReactionStrategy(this.fighter.getReactionStrategy());\n      this.fighter.setReactionStrategy(shockReaction);\n      this.fighter.registerObserver(this);\n    }\n\n    @Override\n    public void update() {\n      if (beatCount == shockDuration) {\n        shockAction.unblock(); // restore\n        shockReaction.unblock();\n        this.fighter.unregisterObserver(this);\n      } else {\n        beatCount++;\n      }\n    }\n\n  }\n\n"}),i.a.createElement(r.a,{prev:"evolutionAdapter",next:"evolutionHeroes"}))}}}]);
//# sourceMappingURL=11.4bf113fa.chunk.js.map