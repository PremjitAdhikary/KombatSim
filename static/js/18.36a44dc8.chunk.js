(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{37:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(6),l=n(1),o=(n(38),function(e,t){return e?r.a.createElement(i.c,{className:"btn",to:Object(l.b)(e).path},t):r.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return r.a.createElement("div",{className:"navs"},r.a.createElement("span",{className:"left"},o(e.prev,"Previous")),r.a.createElement("span",{className:"right"},o(e.next,"Next")))}},38:function(e,t,n){},39:function(e,t,n){"use strict";var a=n(8),r=n(0),i=n.n(r),l=(n(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),o=["Override"],c=function(e){return e=function(e){var t=e,n=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(n){var r=Object(a.a)(n);r.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e=function(e){var t=e;return o.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return l.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e)))};t.a=function(e){var t={__html:"<pre>"+c(e.code)+"</pre>"};return i.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,n){},66:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),i=n(37),l=n(6),o=n(1),c=n(39);t.default=function(){return r.a.createElement("div",{className:"main"},r.a.createElement("div",{className:"pageTitle"},"More Lambda"),r.a.createElement("p",null,"Let's check out a few other tricks."),r.a.createElement("div",{className:"sectionTitle"},"Lambda in Factory"),r.a.createElement("p",null,"While the ",r.a.createElement(l.b,{to:Object(o.b)("evolutionCreators").path},"FighterFactories")," follow the conventional way, ",r.a.createElement("code",null,"AllDecorators")," and ",r.a.createElement("code",null,"Spells")," are two factories which are built on the lambda concepts that we went through in the last few sections."),r.a.createElement(c.a,{code:'\n\n  public final class AllDecorators {\n\n    public static final String SAMURAI = "Samurai";\n    ...\n\n    private static final Map&lt;String, Function&lt;Fighter, FighterDecorator&gt;&gt; decoratorMap \n              = new HashMap&lt;&gt;();\n\n    Function&lt;Fighter, FighterDecorator&gt; samuraiArmor = samurai -> \n        Armor.create( aSamuraiArmor -> \n            aSamuraiArmor\n              .toProtect(samurai)\n              .armorLife(30)\n              .damageRecutionMultiplier(0.3)\n              .enablePhysicalDamageReduction()\n        );\n\n    Function&lt;Fighter, FighterDecorator&gt; samuraiSword = samurai -> \n        Weapon.create( aSword -> \n            aSword\n              .name("Sword")\n              .wielder(samurai)\n              .addCommand()\n              .withName("Slash")\n              .andMove( f -> \n                  PhysicalDamage.create( damage -> \n                    damage.min(f.strength() * 0.4).max(f.strength() * 0.4 + 10)\n                  )\n              )\n              .addCommand()\n              .withName("Cut")\n              .andMove( f -> \n                  PhysicalDamage.create( damage -> \n                    damage.min(f.strength() * 0.5).max(f.strength() * 0.5 + 20)\n                  )\n              )\n              .replaceActions()\n        );\n\n    Function&lt;Fighter, FighterDecorator&gt; samurai = samuraiArmor.andThen(samuraiSword);\n\n    ...\n\n    static {\n      decoratorMap.put(SAMURAI, samurai);\n      ...\n    }\n\n    private AllDecorators() { }\n\n    public static FighterDecorator getDecorator(String decorator, Fighter baseFighter) {\n      if (decoratorMap.contains(decorator)) {\n        return decoratorMap.get(decorator).apply(baseFighter);\n      }\n      throw new IllegalArgumentException("Invalid Decorator");\n    }\n  }\n\n'}),r.a.createElement("p",null,"The above code takes a fighter and transforms him into a Samurai! Other decorators include Ninja, Batman."),r.a.createElement("p",null,"You might have noticed by now that this form of factory implementation is the result of putting in the combined knowledge of the last three sections."),r.a.createElement("p",null,"That's Functional programming is at its best! Combine, combine, combine!"),r.a.createElement("div",{className:"sectionTitle"},"Combinator Pattern"),r.a.createElement("p",null,"This sound just like what we discussed above. And It is!"),r.a.createElement("p",null,"Combine primitives into more complex structures. That's ",r.a.createElement("strong",null,"Combinator Pattern"),"."),r.a.createElement("p",null,"A simple example. ",r.a.createElement("code",null,"ActionSpell.canbeExecuted()")," takes in an additional custom condition. All these conditions are checked and the result combined to deliver the verdict!"),r.a.createElement(c.a,{code:"\n\n  public class ActionSpell implements ActionCommand {\n    ...\n    Predicate&lt;Mage&gt; customCondition;\n\n    ...\n\n    @Override\n    public boolean canBeExecuted() {\n      return isReady() && mageHasMana() && customCondition.test(mage);\n    }\n\n  }\n\n"}),r.a.createElement("p",null,"Here in Spells factory, we construct 2 spells where we apply a custom condition."),r.a.createElement("p",null,r.a.createElement("em",null,"Life Steal")," spell can only be executed if the mage health is critically low."),r.a.createElement("p",null,"For the spell ",r.a.createElement("em",null,"Paralyze")," it's otherwise (combines the original condition with a negation)."),r.a.createElement(c.a,{code:'\n\n  public final class Spells {\n\n    ...\n\n    private static Predicate&lt;Mage&gt; critical = \n          mage -> mage.currentLife() < (mage.maxLife() * 0.2);\n          \n    private static Function&lt;Mage, ActionSpell&gt; lifeSteal = mage -> \n        ActionSpell.create( action -> \n              action\n                .mage(mage)\n                .name("LifeSteal")\n                ...\n                .executeCondition(critical) // mage about to die\n        );\n          \n    private static Function&lt;Mage, ActionSpell&gt; paralyze = mage -> \n        ActionSpell.create( action -> \n              action\n                .mage(mage)\n                .name("Paralyze")\n                ...\n                .executeCondition( critical.negate() ) // mage healthy\n        );\n\n    ...\n\n  }\n\n'}),r.a.createElement("p",null,"Simple example, limitless possibilites!"),r.a.createElement(i.a,{prev:"lambdaBuilder"}))}}}]);
//# sourceMappingURL=18.36a44dc8.chunk.js.map