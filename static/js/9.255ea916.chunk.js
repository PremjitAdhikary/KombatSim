(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{37:function(e,t,a){"use strict";var n=a(0),r=a.n(n),i=a(6),o=a(1),l=(a(38),function(e,t){return e?r.a.createElement(i.c,{className:"btn",to:Object(o.b)(e).path},t):r.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return r.a.createElement("div",{className:"navs"},r.a.createElement("span",{className:"left"},l(e.prev,"Previous")),r.a.createElement("span",{className:"right"},l(e.next,"Next")))}},38:function(e,t,a){},39:function(e,t,a){"use strict";var n=a(8),r=a(0),i=a.n(r),o=(a(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),l=["Override"],s=function(e){return e=function(e){var t=e,a=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(a){var r=Object(n.a)(a);r.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e=function(e){var t=e;return l.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return o.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e)))};t.a=function(e){var t={__html:"<pre>"+s(e.code)+"</pre>"};return i.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,a){},41:function(e,t,a){},42:function(e,t,a){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(a.push(o.value),!t||a.length!==t);n=!0);}catch(s){r=!0,i=s}finally{try{n||null==l.return||l.return()}finally{if(r)throw i}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var r=a(0),i=a.n(r),o=a(8),l={evolution:[{id:"evolutionMediatorCD",path:"/evolution/Evolution-Mediator-ClassDiagram.svg",text:"Mediator Class Diagram"},{id:"evolutionMediatorSD",path:"/evolution/Evolution-Mediator-SequenceDiagram.svg",text:"Mediator Sequence Diagram"},{id:"evolutionActionCommandCD",path:"/evolution/Evolution-ActionCommand-ClassDiagram.svg",text:"Action Command Class Diagram"},{id:"evolutionActionCommandSD",path:"/evolution/Evolution-ActionCommand-SequenceDiagram.svg",text:"Action Command Sequence Diagram"},{id:"evolutionStrategyTemplateCD",path:"/evolution/Evolution-ActionStrategyTemplate-ClassDiagram.svg",text:"Action Strategy and Template Class Diagram"},{id:"evolutionStrategyTemplateSD",path:"/evolution/Evolution-ActionStrategyTemplate-SequenceDiagram.svg",text:"Action Strategy and Template Sequence Diagram"},{id:"evolutionBridgeCD",path:"/evolution/Evolution-StrategyCommandBridge-ClassDiagram.svg",text:"Bridge Class Diagram"},{id:"evolutionObserverCD",path:"/evolution/Evolution-BeatObserver-ClassDiagram.svg",text:"Observer Class Diagram"},{id:"evolutionActionObserverSD",path:"/evolution/Evolution-ActionObserver-SequenceDiagram.svg",text:"Action Observer Sequence Diagram"},{id:"evolutionTikTokSD",path:"/evolution/Evolution-TikTok-SequenceDiagram.svg",text:"Tik Tok Sequence Diagram"},{id:"evolutionActionSD",path:"/evolution/Evolution-Action-SequenceDiagram.svg",text:"Action Sequence Diagram"},{id:"evolutionReactionSD",path:"/evolution/Evolution-Reaction-SequenceDiagram.svg",text:"Reaction Sequence Diagram"},{id:"evolutionDecoratorCD",path:"/evolution/Evolution-Decorator-ClassDiagram.svg",text:"Decorator Class Diagram"},{id:"evolutionDecoratorSD",path:"/evolution/Evolution-Decorator-SequenceDiagram.svg",text:"Decorator Sequence Diagram"},{id:"evolutionAdapterCD",path:"/evolution/Evolution-Adapter-ClassDiagram.svg",text:"Adapter Class Diagram"},{id:"evolutionAdapterSD",path:"/evolution/Evolution-Adapter-SequenceDiagram.svg",text:"Adapter Sequence Diagram"},{id:"evolutionCompositeCD",path:"/evolution/Evolution-Composite-ClassDiagram.svg",text:"Composite Class Diagram"},{id:"evolutionMoveVisitorCD",path:"/evolution/Evolution-MoveVisitor-ClassDiagram.svg",text:"Move Visitor Class Diagram"},{id:"evolutionMoveVisitorSD",path:"/evolution/Evolution-MoveVisitor-SequenceDiagram.svg",text:"Move Visitor Sequence Diagram"},{id:"evolutionFighterVisitorSD",path:"/evolution/Evolution-FighterVisitor-SequenceDiagram.svg",text:"Fighter Visitor Sequence Diagram"}],hierarchy:[{id:"hierarchyMove",path:"/hierarchy/Hierarchy-Move.svg",text:"Class Hierarchy of Moves"},{id:"hierarchyActionCommand",path:"/hierarchy/Hierarchy-ActionCommand.svg",text:"Class Hierarchy of ActionCommand"},{id:"hierarchyReactionCommand",path:"/hierarchy/Hierarchy-ReactionCommand.svg",text:"Class Hierarchy of ReactionCommand"},{id:"hierarchyFighter",path:"/hierarchy/Hierarchy-Fighter.svg",text:"Class Hierarchy of Fighter"}]},s=function(e){return[].concat(Object(o.a)(l.evolution),Object(o.a)(l.hierarchy)).find(function(t){return t.id===e})},c=(a(41),function(e){if(!e)return"large-content";switch(e){case"medium":return"large-content-med";case"large":return"large-content-full";case"small":default:return"large-content"}});t.a=function(e){var t=s(e.imgId),a=n(Object(r.useState)(!0),2),o=a[0],l=a[1];return i.a.createElement("div",{className:"center"},i.a.createElement("div",{className:"regular",onClick:function(){return l(!1)}},i.a.createElement("img",{src:""+t.path,alt:t.text}),i.a.createElement("div",null,t.text)),i.a.createElement("div",{className:"large",style:{display:o?"none":"block"}},i.a.createElement("span",{className:"close",onClick:function(){return l(!0)}},"\xd7"),i.a.createElement("img",{className:c(e.imgSize),alt:t.text,src:""+t.path}),i.a.createElement("div",{className:"caption"},t.text)))}},48:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),i=a(42),o=a(37),l=a(39);t.default=function(){return r.a.createElement("div",{className:"main"},r.a.createElement("div",{className:"pageTitle"},"So When Does A Fighter Hit?"),r.a.createElement("p",null,"To make two fighters fight, I had set up a one-two-one-two loop for them to hit each other turn by turn."),r.a.createElement("p",null,r.a.createElement("em",null,"That was the original version which I scrapped.")),r.a.createElement("p",null,"I wanted the fighters to have their own ",r.a.createElement("em",null,"rhythm"),"."),r.a.createElement("p",null,"What I needed was some sort of stimuli to which the fighters would react to."),r.a.createElement("p",null,"Solution? ",r.a.createElement("strong",null,"Observer Pattern"),"."),r.a.createElement(i.a,{imgId:"evolutionObserverCD",imgSize:"medium"}),r.a.createElement("p",null,r.a.createElement("blockquote",null,"I had scrapped my first attempt at KombatSim just for the lack of rhythm. I had already written more than 50 classes - and JUnits for all of them. That's a lot of effort put in a pet project. ",r.a.createElement("em",null,"And still I scrapped"),". But now with what I have in place with Observers and Observables, I am able to achieve so much more than what I originally had thought. So many different effects, which would have been impossible with the original design.")),r.a.createElement("p",null,"The Fighter is also an Observable who notifies his Observers (one of them being our ",r.a.createElement("code",null,"ActionObserver"),")."),r.a.createElement("p",null,"The ",r.a.createElement("code",null,"ActionObserver")," in turn checks if the fighter can ",r.a.createElement("code",null,"act()")," or not. This decision is based on the Fighters agility (one of the properties)."),r.a.createElement("p",null,"If he can, the fighter hits, else waits for the next ",r.a.createElement("code",null,"update()"),"."),r.a.createElement("p",null,"This is what gives the rhythm to the fighter."),r.a.createElement(i.a,{imgId:"evolutionActionObserverSD"}),r.a.createElement("p",null,"Ok, so that was just half the story."),r.a.createElement("p",null,"Even though the Fighter is an Observable, the question remains how does the fighter know when to ",r.a.createElement("code",null,"notifyObservers()"),"?"),r.a.createElement("p",null,"Readers with acute observation may have observed that in the Sequence Diagram above, the 'Found Message' to our Observable Fighter is an ",r.a.createElement("code",null,"update()"),", which is an Observer api."),r.a.createElement("p",null,"Yes, Fighter acts both as an Observer as well as an Observable."),r.a.createElement("p",null,"When a Fighter gets added to an Arena, he is also added as an Observer to an internal Beat System which every Arena has."),r.a.createElement("p",null,"The Fighters are added to two different BeatObservables."),r.a.createElement("p",null,"When the fight starts, those two Observables notify the Fighters in an alternate fashion."),r.a.createElement("p",null,"This system is realized in the ",r.a.createElement("code",null,"TikTok")," class which is depicted in the Sequence Diagram below."),r.a.createElement(i.a,{imgId:"evolutionTikTokSD",imgSize:"medium"}),r.a.createElement("div",{className:"sectionTitle"},"Sample Code"),r.a.createElement("p",null,"Here goes the ",r.a.createElement("code",null,"TikTok")," code."),r.a.createElement(l.a,{code:"\n\n  public interface BeatObserver {\n    void update();\n  }\n\n  public interface BeatObservable {\n    void notifyObservers();\n    void registerObserver(BeatObserver observer);\n    void unregisterObserver(BeatObserver observer);\n  }\n\n  public class ActionObserver implements BeatObserver {\n    Fighter fighter;\n\n    @Override\n    public void update() {\n      if (fighterCanActOnThisBeat) { // some condition based on some attribute\n        this.fighter.act();\n      }\n    }\n  }\n\n  public class AConcreteFighter implements Fighter, BeatObserver, BeatObservable {\n    ConcreteObservable observable; // ActionObserver gets registered here\n    ActionStrategy actionStrategy;\n    ...\n\n    @Override\n    public void update() {\n      this.notifyObservers();\n    }\n\n    @Override\n    public void notifyObservers() {\n      this.observable.notifyObservers();\n    }\n\n    @Override\n    public void registerObserver(BeatObserver observer) {\n      this.observable.registerObserver(observer);\n    }\n\n    @Override\n    public void unregisterObserver(BeatObserver observer) {\n      this.observable.unregisterObserver(observer);\n    }\n\n    @Override\n    public void act() {\n      this.actionStrategy.perform();\n    }\n    ...\n\n  }\n\n"}),r.a.createElement(o.a,{prev:"evolutionStrategy",next:"evolutionActionReaction"}))}}}]);
//# sourceMappingURL=9.255ea916.chunk.js.map