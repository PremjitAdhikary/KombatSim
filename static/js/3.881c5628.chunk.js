(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{37:function(e,t,a){"use strict";var n=a(0),r=a.n(n),i=a(6),o=a(1),l=(a(38),function(e,t){return e?r.a.createElement(i.c,{className:"btn",to:Object(o.b)(e).path},t):r.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return r.a.createElement("div",{className:"navs"},r.a.createElement("span",{className:"left"},l(e.prev,"Previous")),r.a.createElement("span",{className:"right"},l(e.next,"Next")))}},38:function(e,t,a){},39:function(e,t,a){"use strict";var n=a(8),r=a(0),i=a.n(r),o=(a(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),l=["Override"],c=function(e){return e=function(e){var t=e,a=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(a){var r=Object(n.a)(a);r.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e=function(e){var t=e;return l.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return o.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e)))};t.a=function(e){var t={__html:"<pre>"+c(e.code)+"</pre>"};return i.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,a){},41:function(e,t,a){},42:function(e,t,a){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(a.push(o.value),!t||a.length!==t);n=!0);}catch(c){r=!0,i=c}finally{try{n||null==l.return||l.return()}finally{if(r)throw i}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var r=a(0),i=a.n(r),o=a(8),l={evolution:[{id:"evolutionMediatorCD",path:"/evolution/Evolution-Mediator-ClassDiagram.svg",text:"Mediator Class Diagram"},{id:"evolutionMediatorSD",path:"/evolution/Evolution-Mediator-SequenceDiagram.svg",text:"Mediator Sequence Diagram"},{id:"evolutionActionCommandCD",path:"/evolution/Evolution-ActionCommand-ClassDiagram.svg",text:"Action Command Class Diagram"},{id:"evolutionActionCommandSD",path:"/evolution/Evolution-ActionCommand-SequenceDiagram.svg",text:"Action Command Sequence Diagram"},{id:"evolutionStrategyTemplateCD",path:"/evolution/Evolution-ActionStrategyTemplate-ClassDiagram.svg",text:"Action Strategy and Template Class Diagram"},{id:"evolutionStrategyTemplateSD",path:"/evolution/Evolution-ActionStrategyTemplate-SequenceDiagram.svg",text:"Action Strategy and Template Sequence Diagram"},{id:"evolutionBridgeCD",path:"/evolution/Evolution-StrategyCommandBridge-ClassDiagram.svg",text:"Bridge Class Diagram"},{id:"evolutionObserverCD",path:"/evolution/Evolution-BeatObserver-ClassDiagram.svg",text:"Observer Class Diagram"},{id:"evolutionActionObserverSD",path:"/evolution/Evolution-ActionObserver-SequenceDiagram.svg",text:"Action Observer Sequence Diagram"},{id:"evolutionTikTokSD",path:"/evolution/Evolution-TikTok-SequenceDiagram.svg",text:"Tik Tok Sequence Diagram"},{id:"evolutionActionSD",path:"/evolution/Evolution-Action-SequenceDiagram.svg",text:"Action Sequence Diagram"},{id:"evolutionReactionSD",path:"/evolution/Evolution-Reaction-SequenceDiagram.svg",text:"Reaction Sequence Diagram"},{id:"evolutionDecoratorCD",path:"/evolution/Evolution-Decorator-ClassDiagram.svg",text:"Decorator Class Diagram"},{id:"evolutionDecoratorSD",path:"/evolution/Evolution-Decorator-SequenceDiagram.svg",text:"Decorator Sequence Diagram"},{id:"evolutionAdapterCD",path:"/evolution/Evolution-Adapter-ClassDiagram.svg",text:"Adapter Class Diagram"},{id:"evolutionAdapterSD",path:"/evolution/Evolution-Adapter-SequenceDiagram.svg",text:"Adapter Sequence Diagram"},{id:"evolutionCompositeCD",path:"/evolution/Evolution-Composite-ClassDiagram.svg",text:"Composite Class Diagram"},{id:"evolutionMoveVisitorCD",path:"/evolution/Evolution-MoveVisitor-ClassDiagram.svg",text:"Move Visitor Class Diagram"},{id:"evolutionMoveVisitorSD",path:"/evolution/Evolution-MoveVisitor-SequenceDiagram.svg",text:"Move Visitor Sequence Diagram"},{id:"evolutionFighterVisitorSD",path:"/evolution/Evolution-FighterVisitor-SequenceDiagram.svg",text:"Fighter Visitor Sequence Diagram"}],hierarchy:[{id:"hierarchyMove",path:"/hierarchy/Hierarchy-Move.svg",text:"Class Hierarchy of Moves"},{id:"hierarchyActionCommand",path:"/hierarchy/Hierarchy-ActionCommand.svg",text:"Class Hierarchy of ActionCommand"},{id:"hierarchyReactionCommand",path:"/hierarchy/Hierarchy-ReactionCommand.svg",text:"Class Hierarchy of ReactionCommand"},{id:"hierarchyFighter",path:"/hierarchy/Hierarchy-Fighter.svg",text:"Class Hierarchy of Fighter"}]},c=function(e){return[].concat(Object(o.a)(l.evolution),Object(o.a)(l.hierarchy)).find(function(t){return t.id===e})},s=(a(41),function(e){if(!e)return"large-content";switch(e){case"medium":return"large-content-med";case"large":return"large-content-full";case"small":default:return"large-content"}});t.a=function(e){var t=c(e.imgId),a=n(Object(r.useState)(!0),2),o=a[0],l=a[1];return i.a.createElement("div",{className:"center"},i.a.createElement("div",{className:"regular",onClick:function(){return l(!1)}},i.a.createElement("img",{src:"/KombatSim"+t.path,alt:t.text}),i.a.createElement("div",null,t.text)),i.a.createElement("div",{className:"large",style:{display:o?"none":"block"}},i.a.createElement("span",{className:"close",onClick:function(){return l(!0)}},"\xd7"),i.a.createElement("img",{className:s(e.imgSize),alt:t.text,src:"/KombatSim"+t.path}),i.a.createElement("div",{className:"caption"},t.text)))}},52:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),i=a(42),o=a(37),l=a(39);t.default=function(){return r.a.createElement("div",{className:"main"},r.a.createElement("div",{className:"pageTitle"},"Clash Of Teams"),r.a.createElement("p",null,"Now that  we have Amateurs, Professionals and even Enhanced Fighters I planned to put them in Team fights."),r.a.createElement("p",null,"My idea was of a simple two-man team. One fighter just attacks, the other just defends."),r.a.createElement("p",null,"So two teams fighting each other means I will have four fighters in the Arena. ",r.a.createElement("em",null,"But the Arena only accepts 2 fighters!")),r.a.createElement("p",null,"Enter ",r.a.createElement("strong",null,"Adapter Pattern"),". It will act as a single fighter interface to the Arena while internally house two fighters and would delegate the ",r.a.createElement("code",null,"act()"),"/",r.a.createElement("code",null,"react()")," accordingly."),r.a.createElement(i.a,{imgId:"evolutionAdapterCD",imgSize:"medium"}),r.a.createElement("p",null,"The actual plumbing required little more than just implement ",r.a.createElement("strong",null,"Adapter Pattern"),"."),r.a.createElement("p",null,"You see, while the ",r.a.createElement("code",null,"react()")," redirection was easy to set up, recall that ",r.a.createElement("code",null,"act()")," is invoked by a ",r.a.createElement("code",null,"ActionObserver")," on individual Fighter based on their Dexterity."),r.a.createElement("p",null,r.a.createElement("em",null,"Need to suppress the action of the Defender.")),r.a.createElement("p",null,"For this the ",r.a.createElement("code",null,"ActionStrategy")," of the team members were wrapped to only keep the Offender Strategy enabled. ",r.a.createElement("strong",null,"Strategy Pattern")," ",r.a.createElement("em",null,"yo!")),r.a.createElement("p",null,"There was another hiccup in the ",r.a.createElement("code",null,"act()")," component."),r.a.createElement("p",null,r.a.createElement("em",null,"The Hit message to the  right recipient.")),r.a.createElement("p",null,"Because there were multiple fighters on the arena now, ",r.a.createElement("em",null,"how does the arena know which recipient to send it to?")),r.a.createElement("p",null,"This was resolved using ",r.a.createElement("strong",null,"Proxy Pattern"),"."),r.a.createElement("p",null,"A ProxyArena would take the hit message from a team member, then send it to the actual Arena as a hit that has come from the team rather than the specific fighter."),r.a.createElement(i.a,{imgId:"evolutionAdapterSD",imgSize:"medium"}),r.a.createElement("div",{className:"sectionTitle"},"Sample Code"),r.a.createElement(l.a,{code:"\n\n  public class ProxyArena implements ArenaMediator {\n    AbstractFighter team;\n\n    ProxyArena(AbstractFighter team) {\n      this.team = team;\n    }\n\n    @Override\n    public void sendMove(Move move) {\n      this.team.arena().sendMove(move);\n    }\n\n    ...\n  }\n\n  public class OffenderActionStrategy implements ActionStrategy {\n    protected AbstractFighter fighter;\n    protected ActionStrategy originalStrategy;\n\n    public OffenderActionStrategy(AbstractFighter fighter) {\n      this.fighter = fighter;\n      this.originalStrategy = fighter.getActionStrategy();\n    }\n\n    @Override\n    public void perform() {\n      if (fighterIsOffender()) {\n        originalStrategy.perform();\n      }\n    }\n\n  }\n\n  public class OffenderDefenderTeam extends ConcreteFighter {\n    ConcreteFighter offender;\n    ConcreteFighter defender;\n    ProxyArena proxy;\n\n    public OffenderDefenderTeam(ArenaMediator arena, \n        ConcreteFighter offender, ConcreteFighter defender) {\n      super(arena);\n      this.offender = offender;\n      this.defender = defender;\n      this.proxyArena = new new ProxyArena(this);\n      // set proxy arena into team members\n      this.offender.arena(proxyArena);\n      this.defender.arena(proxyArena);\n      // set OffenderActionStrategy into team members\n      this.offender.setActionStrategy(new OffenderActionStrategy(this.offender));\n      this.defender.setActionStrategy(new OffenderActionStrategy(this.defender));\n    }\n\n    @Override\n    public void react(Move move) {\n      this.defender.react(move);\n    }\n\n  }\n\n  // setting it up\n  ArenaMediator arena = new ConcreteArenaMediator();\n  ConcreteFighter fighterA = new ConcreteFighter(arena);\n  ConcreteFighter fighterB = new ConcreteFighter(arena);\n  OffenderDefenderTeam team = new OffenderDefenderTeam(arena, fighterA, fighterB);\n\n"}),r.a.createElement("p",null,"Next ... TagTeam!"),r.a.createElement("p",null,"Unlike the OffenderDefenderTeam, TagTeam can have as many fighters in the team as you want."),r.a.createElement("p",null,"The idea is that among all fighters only one fighter is active at any given moment. At regular intervals the fighter keeps changing in a round robin fashion."),r.a.createElement("p",null,"To keep track of the active fighter in the team, we use the ",r.a.createElement("strong",null,"State Pattern"),"."),r.a.createElement(o.a,{prev:"evolutionDecorator",next:"evolutionDamages"}))}}}]);
//# sourceMappingURL=3.881c5628.chunk.js.map