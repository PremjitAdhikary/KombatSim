{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/lambda/LambdaDecorator.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","forEach","annot","replace","RegExp","openTag","processAnnotations","kw","processKeyword","lineStart","i","length","processIndentations","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","comment","processComments","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_3__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_4__","LambdaDecorator"],"mappings":"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","file":"static/js/16.d42c8a98.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst processIndentations = (someCode) => {\r\n  let processed = '';\r\n  let lineStart = true;\r\n  for (var i=0; i<someCode.length; i++) {\r\n    if (someCode[i] === '\\n') {\r\n      processed += '<br>';\r\n      lineStart = true;\r\n    } else if (lineStart && someCode[i] === ' ') {\r\n      processed += '&nbsp;';\r\n    } else {\r\n      lineStart = false;\r\n      processed += someCode[i];\r\n    }\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processComments(someCode);\r\n  someCode = processIndentations(someCode);\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  //const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  const preBlock = { __html: \"<div id='pre'>\" + someCode + \"</div>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeDecorator = `\r\n\r\n  ConcreteFighter baseFighter = new ConcreteFighter();\r\n  FighterDecorator fighterWithSword = new Weapon(baseFighter);\r\n  FighterDecorator armoredFighter = new Armor(baseFighter);\r\n  FighterDecorator armoredFighterWithSword = new Armor(new Weapon(baseFighter));\r\n\r\n`;\r\n\r\nlet codeFullDecorator = `\r\n\r\n  ConcreteFighter baseFighter = new ConcreteFighter();\r\n  FighterDecorator fighterWithSword = new Weapon(baseFighter);\r\n  fighterWithSword.setName(\"Broad Sword\");\r\n  fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Slash\", slashDamage));\r\n  fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Cut\", cutDamage));\r\n  fighterWithSword.replaceActions();\r\n  fighterWithSword.equip();\r\n\r\n  ConcreteFighter anotherBaseFighter = new ConcreteFighter();\r\n  FighterDecorator armoredFighter = new Armor(anotherBaseFighter);\r\n  armoredFighter.armorLife(armorLife);\r\n  armoredFighter.damageReduction(reduction);\r\n  armoredFighter.enablePhysicalDamageReduction();\r\n  armoredFighter.equip();\r\n\r\n  ConcreteFighter yetAnotherBaseFighter = new ConcreteFighter();\r\n  FighterDecorator anotherFighterWithSword = new Weapon(anotherBaseFighter);\r\n  ... \r\n  anotherFighterWithSword.equip();\r\n  FighterDecorator anotherFighterWithSwordAndArmor = new Armor(anotherFighterWithSword);\r\n  ... \r\n  anotherFighterWithSwordAndArmor.equip();\r\n\r\n`;\r\n\r\nlet codeMethodDecorator = `\r\n\r\n  FighterDecorator weapon(Fighter baseFighter) {\r\n    FighterDecorator fighterWithSword = new Weapon(baseFighter);\r\n    fighterWithSword.setName(\"Broad Sword\");\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Slash\", slashDamage));\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Cut\", cutDamage));\r\n    fighterWithSword.replaceActions();\r\n    fighterWithSword.equip();\r\n    return fighterWithSword;\r\n  }\r\n\r\n  FighterDecorator armor(Fighter baseFighter) {\r\n    FighterDecorator armoredFighter = new Armor(baseFighter);\r\n    armoredFighter.armorLife(armorLife);\r\n    armoredFighter.damageReduction(reduction);\r\n    armoredFighter.enablePhysicalDamageReduction();\r\n    armoredFighter.equip();\r\n    return armoredFighter;\r\n  }\r\n\r\n  ConcreteFighter baseFighter = new ConcreteFighter();\r\n  FighterDecorator fighterWithSword = weapon(baseFighter);\r\n  FighterDecorator armoredFighter = armor(baseFighter);\r\n  FighterDecorator armoredFighterWithSword = armor(weapon(baseFighter));\r\n\r\n`;\r\n\r\nlet codeFunctionDecorator = `\r\n\r\n  Function&lt;Fighter, FighterDecorator&gt; weapon = baseFighter -> {\r\n    FighterDecorator fighterWithSword = new Weapon(baseFighter);\r\n    fighterWithSword.setName(\"Broad Sword\");\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Slash\", slashDamage));\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Cut\", cutDamage));\r\n    fighterWithSword.replaceActions();\r\n    fighterWithSword.equip();\r\n    return fighterWithSword;\r\n  };\r\n\r\n  Function&lt;Fighter, FighterDecorator&gt; armor = baseFighter -> {\r\n    FighterDecorator armoredFighter = new Armor(baseFighter);\r\n    armoredFighter.armorLife(armorLife);\r\n    armoredFighter.damageReduction(reduction);\r\n    armoredFighter.enablePhysicalDamageReduction();\r\n    armoredFighter.equip();\r\n    return armoredFighter;\r\n  };\r\n\r\n  ConcreteFighter baseFighter = new ConcreteFighter();\r\n  FighterDecorator fighterWithSword = weapon.apply(baseFighter);\r\n  FighterDecorator armoredFighter = armor.apply(baseFighter);\r\n\r\n`;\r\n\r\nlet codeFunctionComposition = `\r\n\r\n  Function&lt;Fighter, FighterDecorator&gt; weaponAndArmor = weapon.andThen(armor);\r\n  FighterDecorator armoredFighterWithSword = weaponAndArmor.apply(baseFighter);\r\n\r\n`;\r\n\r\nlet codeBatmanComposition = `\r\n\r\n  Function&lt;Fighter, FighterDecorator&gt; utilityBelt = \r\n      batarang\r\n          .andThen(thermitePellets)\r\n          .andThen(freezeGrenades)\r\n          .andThen(stunPellets)\r\n          .andThen(gasPellets)\r\n          .andThen(manaBurners)\r\n          .andThen(kryptonite);\r\n  FighterDecorator beltedBatman = utilityBelt.apply(batman);\r\n\r\n`;\r\n\r\nconst LambdaDecorator = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Composing Decorators</div>\r\n      <p>\r\n        <strong>Decorator Pattern</strong> is one of the most under appreciated pattern!\r\n      </p>\r\n      <p>\r\n        Obviously it is not studied much.\r\n      </p>\r\n      <p>\r\n        And here I am ... making an already not-so-known pattern even more complicated by \r\n        injecting Functional elements in it. <em>Or am I?</em>\r\n      </p>\r\n      <p>\r\n        Let's revisit how using <strong>Decorator Pattern</strong> we created <Link \r\n        to={getRoute('evolutionDecorator').path}>enhanced fighters</Link>.\r\n      </p>\r\n      <CodeSnippet code={codeDecorator} />\r\n      <p>\r\n        In reality though, it's not so simple. A lot of additional code goes in to weaponize \r\n        a fighter. Something like the below\r\n      </p>\r\n      <CodeSnippet code={codeFullDecorator} />\r\n      <p>\r\n        That's ugly!\r\n      </p>\r\n      <p>\r\n        So what do we do about it? Start by extracting into methods!\r\n      </p>\r\n      <CodeSnippet code={codeMethodDecorator} />\r\n      <p>\r\n        Yup, much better!\r\n      </p>\r\n      <p>\r\n        Let's go a step further. Make them Functions!!\r\n      </p>\r\n      <CodeSnippet code={codeFunctionDecorator} />\r\n      <p>\r\n        And??? What about <code>armoredFighterWithSword</code>?\r\n      </p>\r\n      <p>\r\n        That's where function composition comes into picture. Now I can compose the decorators.\r\n      </p>\r\n      <CodeSnippet code={codeFunctionComposition} />\r\n      <p>\r\n        I know the above doesn't look much, but look how <em>readable</em> it makes Batman's UtilityBelt.\r\n      </p>\r\n      <CodeSnippet code={codeBatmanComposition} />\r\n      <Navigators prev=\"lambdaCommand\" next=\"lambdaLoaner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LambdaDecorator;"],"sourceRoot":""}