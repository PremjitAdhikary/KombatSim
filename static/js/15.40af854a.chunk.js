(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{37:function(e,n,t){"use strict";var a=t(0),o=t.n(a),r=t(6),c=t(1),l=(t(38),function(e,n){return e?o.a.createElement(r.c,{className:"btn",to:Object(c.b)(e).path},n):o.a.createElement("span",{className:"btn-disabled"},n)});n.a=function(e){return o.a.createElement("div",{className:"navs"},o.a.createElement("span",{className:"left"},l(e.prev,"Previous")),o.a.createElement("span",{className:"right"},l(e.next,"Next")))}},38:function(e,n,t){},39:function(e,n,t){"use strict";var a=t(8),o=t(0),r=t.n(o),c=(t(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),l=["Override"],i=function(e){return e=function(e){var n=e,t=n.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(t){var o=Object(a.a)(t);o.forEach(function(e){return n=n.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return n}(e=function(e){var n=e;return l.forEach(function(e){return n=n.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),n}(e=function(e){var n=e;return c.forEach(function(e){return n=n.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),n}(e)))};n.a=function(e){var n={__html:"<pre>"+i(e.code)+"</pre>"};return r.a.createElement("div",{dangerouslySetInnerHTML:n})}},40:function(e,n,t){},62:function(e,n,t){"use strict";t.r(n);var a=t(0),o=t.n(a),r=t(6),c=t(1),l=t(37),i=t(39);n.default=function(){return o.a.createElement("div",{className:"main"},o.a.createElement("div",{className:"pageTitle"},"Lambda For Command"),o.a.createElement("p",null,"We saw how lambda can help redefine the implementation of ",o.a.createElement("strong",null,"Strategy Pattern"),". Who say's we are just limited to that?"),o.a.createElement("p",null,"Let's visit ",o.a.createElement(r.b,{to:Object(c.b)("evolutionDecorator").path},"MojoBasedAction")," from earlier."),o.a.createElement(i.a,{code:"\n\n  public abstract class MojoBasedAction implements ActionCommand {\n    Hero fighter;\n    double mojoCost;\n    String name;\n    ...\n    \n    public MojoBasedAction(Hero fighter, String name, double mojoCost) {\n      ...\n    }\n\n    @Override\n    public void execute() {\n      chargeMojo();\n      Move move = calculateMove();\n      sendMove(move);\n    }\n\n    protected void chargeMojo() {\n      this.fighter.getMojo().incrementMojo(-mojoCost);\n    }\n\n    protected void sendMove(Move move) {\n      // send move to the arena\n    }\n\n    protected abstract Move calculateMove();\n\n  }\n\n"}),o.a.createElement("p",null,"And here we have it's subclass ",o.a.createElement("code",null,"HeatVision"),"."),o.a.createElement(i.a,{code:"\n\n  public class HeatVision extends MojoBasedAction {\n    ...\n\n    public HeatVision(Hero fighter, String name, double mojoCost) {\n      super(fighter, name, mojoCost);\n      ...\n    }\n    \n    @Override\n    protected Move calculateMove() {\n      return new FireDamage(damage, duration, burnDamage);\n    }\n\n  }\n\n"}),o.a.createElement("p",null,"Notice the similarity with the last section? Lot of plumbing to flesh out a different behavior."),o.a.createElement("p",null,"We know what to do. But how?"),o.a.createElement("p",null,"First we promote ",o.a.createElement("code",null,"MojoBasedAction")," from an abstract to a concrete class. Then we add a ",o.a.createElement("code",null,"Supplier")," to it. And finally remove that annoying abstract method ",o.a.createElement("code",null,"calculateMove()"),"."),o.a.createElement(i.a,{code:"\n\n  public class MojoBasedAction implements ActionCommand {\n    Hero fighter;\n    double mojoCost;\n    String name;\n    Supplier&lt;Move&gt; calculateMove;\n    ...\n    \n    public MojoBasedAction(Hero fighter, String name, \n        double mojoCost, Supplier&lt;Move&gt; calculateMove) {\n      ...\n    }\n\n    @Override\n    public void execute() {\n      chargeMojo();\n      Move move = calculateMove.get();\n      sendMove(move);\n    }\n\n    ... // chargeMojo() and sendMove(move) stays the same\n\n  }\n\n"}),o.a.createElement("p",null,"Now we rewrite HeatVision as follows:"),o.a.createElement(i.a,{code:'\n\n  MojoBasedAction heatVision = new MojoBasedAction(\n    fighter, \n    "Heat Vision", \n    cost, \n    () -> new FireDamage(damage, duration, burnDamage)\n  );\n\n'}),o.a.createElement("p",null,"That's it! We keep passing different suppliers to get different actions."),o.a.createElement("p",null,"We have successfully reduced full-fledged subclasses to mere instantiations!"),o.a.createElement(i.a,{code:'\n  \n  MojoBasedAction freezeBreath = new MojoBasedAction(\n    fighter, \n    "Freeze Breath", \n    cost, \n    () -> new ColdDamage(damage, duration, reduceDexterity)\n  );\n  \n  MojoBasedAction arcLightning = new MojoBasedAction(\n    fighter, \n    "Arc Lightning", \n    cost, \n    () -> new ShockDamage(damage, duration)\n  );\n\n'}),o.a.createElement("p",null,"Same idea is extended to other commands like ",o.a.createElement("code",null,"ActionSpell")," and ",o.a.createElement("code",null,"ReactionSpell"),"."),o.a.createElement(l.a,{prev:"lambdaStrategy",next:"lambdaDecorator"}))}}}]);
//# sourceMappingURL=15.40af854a.chunk.js.map