{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/lambda/LambdaBuilder.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","forEach","annot","replace","RegExp","openTag","processAnnotations","kw","processKeyword","lineStart","i","length","processIndentations","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","comment","processComments","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_1__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","_const_Routes__WEBPACK_IMPORTED_MODULE_4__","LambdaBuilder"],"mappings":"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","file":"static/js/14.9eab3a13.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst processIndentations = (someCode) => {\r\n  let processed = '';\r\n  let lineStart = true;\r\n  for (var i=0; i<someCode.length; i++) {\r\n    if (someCode[i] === '\\n') {\r\n      processed += '<br>';\r\n      lineStart = true;\r\n    } else if (lineStart && someCode[i] === ' ') {\r\n      processed += '&nbsp;';\r\n    } else {\r\n      lineStart = false;\r\n      processed += someCode[i];\r\n    }\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processComments(someCode);\r\n  someCode = processIndentations(someCode);\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  //const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  const preBlock = { __html: \"<div id='pre'>\" + someCode + \"</div>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\nimport {Link} from 'react-router-dom';\r\nimport  {getRoute} from '../../const/Routes';\r\n\r\nlet codeFunctionWeapon = `\r\n\r\n  Function&lt;Fighter, FighterDecorator&gt; weapon = baseFighter -> {\r\n    FighterDecorator fighterWithSword = new Weapon(baseFighter);\r\n    fighterWithSword.setName(\"Broad Sword\");\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Slash\", slashDamage));\r\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand(\"Cut\", cutDamage));\r\n    fighterWithSword.replaceActions();\r\n    fighterWithSword.equip();\r\n    return fighterWithSword;\r\n  };\r\n\r\n`;\r\n\r\nlet codeFluentWeaponBuilder = `\r\n\r\n  FighterDecorator fighterWithSword = Weapon.create( sword -> \r\n    sword\r\n      .name(\"Broad Sword\")\r\n      .wielder(baseFighter)\r\n      .addCommand()\r\n      .withName(\"Slash\")\r\n      .andMove(slashDamage)\r\n      .addCommand()\r\n      .withName(\"Cut\")\r\n      .andMove(cutDamage)\r\n      .replaceActions()\r\n  );\r\n\r\n`;\r\n\r\nlet codeWeaponBuilder = `\r\n\r\n  public class Weapon extends FighterDecorator {\r\n\r\n    ...\r\n\r\n    private Weapon(Fighter fighter, String weaponName) { ... }\r\n\r\n    ...\r\n\r\n    // inner builder\r\n\r\n    public static Weapon create(Consumer&lt;WeaponNameBuilder&gt; block) {\r\n      WeaponBuilder builder = new WeaponBuilder();\r\n      block.accept(builder);\r\n      builder.build();\r\n    }\r\n\r\n    public interface WeaponNameBuilder {\r\n      WeaponFighterBuilder name(String name);\r\n    }\r\n  \r\n    public interface WeaponFighterBuilder {\r\n      WeaponOptionsBuilder wielder(Fighter fighter);\r\n    }\r\n  \r\n    public interface WeaponOptionsBuilder {\r\n      WeaponCommandNameBuilder addCommand();\r\n      WeaponOptionsBuilder replaceActions();\r\n    }\r\n  \r\n    public interface WeaponCommandNameBuilder {\r\n      WeaponMoveBuilder withName(String name);\r\n    }\r\n  \r\n    public interface WeaponMoveBuilder {\r\n      WeaponOptionsBuilder andMove(Function&lt;Fighter, Move&gt; move);\r\n    }\r\n  \r\n    public static class WeaponBuilder implements WeaponNameBuilder, \r\n        WeaponFighterBuilder, WeaponOptionsBuilder,\r\n        WeaponCommandNameBuilder, WeaponMoveBuilder\r\n    {\r\n      private String weaponName;\r\n      private String commandName;\r\n      private Weapon weapon;\r\n\r\n      private WeaponBuilder() { }\r\n\r\n      @Override\r\n      public WeaponFighterBuilder name(String name) {\r\n        weaponName = name;\r\n        return this;\r\n      }\r\n\r\n      @Override\r\n      public WeaponOptionsBuilder wielder(Fighter fighter) {\r\n        weapon = new Weapon(fighter, weaponName);\r\n        return this;\r\n      }\r\n\r\n      @Override\r\n      public WeaponCommandNameBuilder addCommand() {\r\n        return this;\r\n      }\r\n\r\n      @Override\r\n      public WeaponMoveBuilder withName(String name) {\r\n        commandName = name;\r\n        return this;\r\n      }\r\n\r\n      @Override\r\n      public WeaponOptionsBuilder andMove(Function&lt;Fighter, Move&gt; move) {\r\n        WeaponCommand action = new WeaponCommand(commandName, move);\r\n        weapon.addAction(action);\r\n        return this;\r\n      }\r\n\r\n      @Override\r\n      public WeaponOptionsBuilder replaceActions() {\r\n        weapon.replaceActions = true;\r\n        return this;\r\n      }\r\n\r\n      private Weapon build() {\r\n        // validate at least 1 WeaponCommand\r\n        assert(!weapon.allActions().isEmpty());\r\n        weapon.equip();\r\n        return weapon;\r\n      }\r\n\r\n    }\r\n\r\n    class WeaponCommand implements ActionCommand {\r\n\r\n      ...\r\n\r\n      WeaponCommand(String name, Function&lt;Fighter, Move&gt; moveFunction) { ... }\r\n\r\n      @Override\r\n      public void execute() {\r\n        sendMove(moveFunction.apply(theFighter));\r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nconst LambdaBuilder = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Building Restrictions</div>\r\n      <p>This section expands upon the previous one.</p>\r\n      <p>Expands more on the Builder side that is. Not much to do with lambda!</p>\r\n      <p>You can skip if you want to.</p>\r\n      <p><em>Still here?</em></p>\r\n      <p>Alright then!</p>\r\n      <p>\r\n        Let's take a look into the Function 'weapon' from the section <Link \r\n        to={getRoute('lambdaDecorator').path}>Compose/Decorate</Link>.\r\n      </p>\r\n      <CodeSnippet code={codeFunctionWeapon} />\r\n      <p>\r\n        A couple of points pop out:\r\n      </p>\r\n      <ul>\r\n        <li><em>baseFighter</em> and weapon name are mandatory.</li>\r\n        <li>At least 1 <code>WeaponCommand</code> must be added.</li>\r\n        <li>Call to <code>FighterDecorator.equip()</code> is mandatory at the end.</li>\r\n        <li><code>buildAndAddWeaponCommand()</code> is passed a 'freshly constructed' <code>\r\n        WeaponCommand</code>. Leads to the same problem - 'to look into documentation for what \r\n        goes in a constructor'</li>\r\n      </ul>\r\n      <p>From the above list, two of them can be sorted out.</p>\r\n      <p>\r\n        Check for the presence of 'at least 1 <code>WeaponCommand</code>' and calling <code>\r\n        FighterDecorator.equip()</code>, both can be handled in <code>build()</code>.\r\n      </p>\r\n      <p>\r\n        What if we can guide the client for the rest? What if we could restrict the path of the \r\n        fluent api? Something like below...\r\n      </p>\r\n      <CodeSnippet code={codeFluentWeaponBuilder} />\r\n      <p>\r\n        Here the builder drives you:\r\n      </p>\r\n      <ul>\r\n        <li>At <code>sword.</code> the only api exposed is <code>name()</code></li>\r\n        <li>Once <code>name()</code> is set, only api exposed is <code>wielder()</code></li>\r\n        <li>\r\n          At this point you have options to:\r\n          <ul>\r\n            <li>\r\n              <code>addCommand()</code> - to add a <code>WeaponCommand</code>. If this path is \r\n              taken..\r\n              <ul>\r\n                <li>The next api exposed is <code>withName()</code></li>\r\n                <li>Then <code>andMove()</code> is exposed</li>\r\n                <li>Back to options</li>\r\n              </ul>\r\n            </li>\r\n            <li><code>replaceActions()</code> - to use only <code>WeaponCommand</code>s for \r\n            attacks</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <p>Cool!</p>\r\n      <p><em>But how?</em></p>\r\n      <p>A lot of code actually...</p>\r\n      <CodeSnippet code={codeWeaponBuilder} />\r\n      <p>\r\n        I know. It's an overkill. But it's sure a good pattern to know!\r\n      </p>\r\n      <Navigators prev=\"lambdaLoaner\" next=\"lambdaMore\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LambdaBuilder;"],"sourceRoot":""}