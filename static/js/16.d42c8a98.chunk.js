(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{37:function(e,t,r){"use strict";var n=r(0),a=r.n(n),o=r(6),i=r(1),h=(r(38),function(e,t){return e?a.a.createElement(o.c,{className:"btn",to:Object(i.b)(e).path},t):a.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return a.a.createElement("div",{className:"navs"},a.a.createElement("span",{className:"left"},h(e.prev,"Previous")),a.a.createElement("span",{className:"right"},h(e.next,"Next")))}},38:function(e,t,r){},39:function(e,t,r){"use strict";var n=r(8),a=r(0),o=r.n(a),i=(r(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),h=["Override"],c=function(e){return e=function(e){var t=e;return h.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return i.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e=function(e){for(var t="",r=!0,n=0;n<e.length;n++)"\n"===e[n]?(t+="<br>",r=!0):r&&" "===e[n]?t+="&nbsp;":(r=!1,t+=e[n]);return t}(e=function(e){var t=e,r=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(r){var a=Object(n.a)(r);a.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e))))};t.a=function(e){var t={__html:"<div id='pre'>"+c(e.code)+"</div>"};return o.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,r){},64:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),o=r(6),i=r(1),h=r(37),c=r(39);t.default=function(){return a.a.createElement("div",{className:"main"},a.a.createElement("div",{className:"pageTitle"},"Composing Decorators"),a.a.createElement("p",null,a.a.createElement("strong",null,"Decorator Pattern")," is one of the most under appreciated pattern!"),a.a.createElement("p",null,"Obviously it is not studied much."),a.a.createElement("p",null,"And here I am ... making an already not-so-known pattern even more complicated by injecting Functional elements in it. ",a.a.createElement("em",null,"Or am I?")),a.a.createElement("p",null,"Let's revisit how using ",a.a.createElement("strong",null,"Decorator Pattern")," we created ",a.a.createElement(o.b,{to:Object(i.b)("evolutionDecorator").path},"enhanced fighters"),"."),a.a.createElement(c.a,{code:"\n\n  ConcreteFighter baseFighter = new ConcreteFighter();\n  FighterDecorator fighterWithSword = new Weapon(baseFighter);\n  FighterDecorator armoredFighter = new Armor(baseFighter);\n  FighterDecorator armoredFighterWithSword = new Armor(new Weapon(baseFighter));\n\n"}),a.a.createElement("p",null,"In reality though, it's not so simple. A lot of additional code goes in to weaponize a fighter. Something like the below"),a.a.createElement(c.a,{code:'\n\n  ConcreteFighter baseFighter = new ConcreteFighter();\n  FighterDecorator fighterWithSword = new Weapon(baseFighter);\n  fighterWithSword.setName("Broad Sword");\n  fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Slash", slashDamage));\n  fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Cut", cutDamage));\n  fighterWithSword.replaceActions();\n  fighterWithSword.equip();\n\n  ConcreteFighter anotherBaseFighter = new ConcreteFighter();\n  FighterDecorator armoredFighter = new Armor(anotherBaseFighter);\n  armoredFighter.armorLife(armorLife);\n  armoredFighter.damageReduction(reduction);\n  armoredFighter.enablePhysicalDamageReduction();\n  armoredFighter.equip();\n\n  ConcreteFighter yetAnotherBaseFighter = new ConcreteFighter();\n  FighterDecorator anotherFighterWithSword = new Weapon(anotherBaseFighter);\n  ... \n  anotherFighterWithSword.equip();\n  FighterDecorator anotherFighterWithSwordAndArmor = new Armor(anotherFighterWithSword);\n  ... \n  anotherFighterWithSwordAndArmor.equip();\n\n'}),a.a.createElement("p",null,"That's ugly!"),a.a.createElement("p",null,"So what do we do about it? Start by extracting into methods!"),a.a.createElement(c.a,{code:'\n\n  FighterDecorator weapon(Fighter baseFighter) {\n    FighterDecorator fighterWithSword = new Weapon(baseFighter);\n    fighterWithSword.setName("Broad Sword");\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Slash", slashDamage));\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Cut", cutDamage));\n    fighterWithSword.replaceActions();\n    fighterWithSword.equip();\n    return fighterWithSword;\n  }\n\n  FighterDecorator armor(Fighter baseFighter) {\n    FighterDecorator armoredFighter = new Armor(baseFighter);\n    armoredFighter.armorLife(armorLife);\n    armoredFighter.damageReduction(reduction);\n    armoredFighter.enablePhysicalDamageReduction();\n    armoredFighter.equip();\n    return armoredFighter;\n  }\n\n  ConcreteFighter baseFighter = new ConcreteFighter();\n  FighterDecorator fighterWithSword = weapon(baseFighter);\n  FighterDecorator armoredFighter = armor(baseFighter);\n  FighterDecorator armoredFighterWithSword = armor(weapon(baseFighter));\n\n'}),a.a.createElement("p",null,"Yup, much better!"),a.a.createElement("p",null,"Let's go a step further. Make them Functions!!"),a.a.createElement(c.a,{code:'\n\n  Function&lt;Fighter, FighterDecorator&gt; weapon = baseFighter -> {\n    FighterDecorator fighterWithSword = new Weapon(baseFighter);\n    fighterWithSword.setName("Broad Sword");\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Slash", slashDamage));\n    fighterWithSword.buildAndAddWeaponCommand(new WeaponCommand("Cut", cutDamage));\n    fighterWithSword.replaceActions();\n    fighterWithSword.equip();\n    return fighterWithSword;\n  };\n\n  Function&lt;Fighter, FighterDecorator&gt; armor = baseFighter -> {\n    FighterDecorator armoredFighter = new Armor(baseFighter);\n    armoredFighter.armorLife(armorLife);\n    armoredFighter.damageReduction(reduction);\n    armoredFighter.enablePhysicalDamageReduction();\n    armoredFighter.equip();\n    return armoredFighter;\n  };\n\n  ConcreteFighter baseFighter = new ConcreteFighter();\n  FighterDecorator fighterWithSword = weapon.apply(baseFighter);\n  FighterDecorator armoredFighter = armor.apply(baseFighter);\n\n'}),a.a.createElement("p",null,"And??? What about ",a.a.createElement("code",null,"armoredFighterWithSword"),"?"),a.a.createElement("p",null,"That's where function composition comes into picture. Now I can compose the decorators."),a.a.createElement(c.a,{code:"\n\n  Function&lt;Fighter, FighterDecorator&gt; weaponAndArmor = weapon.andThen(armor);\n  FighterDecorator armoredFighterWithSword = weaponAndArmor.apply(baseFighter);\n\n"}),a.a.createElement("p",null,"I know the above doesn't look much, but look how ",a.a.createElement("em",null,"readable")," it makes Batman's UtilityBelt."),a.a.createElement(c.a,{code:"\n\n  Function&lt;Fighter, FighterDecorator&gt; utilityBelt = \n      batarang\n          .andThen(thermitePellets)\n          .andThen(freezeGrenades)\n          .andThen(stunPellets)\n          .andThen(gasPellets)\n          .andThen(manaBurners)\n          .andThen(kryptonite);\n  FighterDecorator beltedBatman = utilityBelt.apply(batman);\n\n"}),a.a.createElement(h.a,{prev:"lambdaCommand",next:"lambdaLoaner"}))}}}]);
//# sourceMappingURL=16.d42c8a98.chunk.js.map