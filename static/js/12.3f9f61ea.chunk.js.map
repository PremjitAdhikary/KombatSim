{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/evolution/EvolutionMagic.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","forEach","annot","replace","RegExp","openTag","processAnnotations","kw","processKeyword","lineStart","i","length","processIndentations","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","comment","processComments","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_1__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_2__","EvolutionMagic"],"mappings":"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","file":"static/js/12.3f9f61ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst processIndentations = (someCode) => {\r\n  let processed = '';\r\n  let lineStart = true;\r\n  for (var i=0; i<someCode.length; i++) {\r\n    if (someCode[i] === '\\n') {\r\n      processed += '<br>';\r\n      lineStart = true;\r\n    } else if (lineStart && someCode[i] === ' ') {\r\n      processed += '&nbsp;';\r\n    } else {\r\n      lineStart = false;\r\n      processed += someCode[i];\r\n    }\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processComments(someCode);\r\n  someCode = processIndentations(someCode);\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  //const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  const preBlock = { __html: \"<div id='pre'>\" + someCode + \"</div>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeSpellBook = `\r\n\r\n  public class SpellBook implements ActionStrategy, ReactionStrategy {\r\n\r\n    protected Mage mage;\r\n\r\n    // Action Command Pool\r\n    protected List&lt;ActionSpell&gt; actionSpellsReady;\r\n    protected List&lt;ActionSpell&gt; actionSpellsCooldown;\r\n\r\n    // Reaction Command Pool\r\n    protected List&lt;ReactionSpell&gt; reactionSpellsReady;\r\n    protected List&lt;ReactionSpell&gt; reactionSpellsCooldown;\r\n\r\n\r\n    @Override\r\n    public void perform() {\r\n      // selects a Spell from actionSpellsReady\r\n      ActionSpell action = getReactionSpell();\r\n\r\n      // at execution, the Spell gets removed from actionSpellsReady \r\n      // and gets added to actionSpellsCooldown\r\n      // after Cooldown, the Spell again moves back to actionSpellsReady\r\n      action.execute();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean perform(Optional<Move> move) {\r\n      // at any point of the fight, anyone of the available reactions of the \r\n      // Mage must be active\r\n      if (!isReactionActive()) {\r\n        // say no Spell is active, select a Spell from reactionSpellsReady\r\n        ReactionSpell reaction = getReactionSpell();\r\n        // at activation, move it to reactionSpellsCooldown\r\n        reaction.activate();\r\n      }\r\n\r\n      ReactionSpell activeReaction = getActiveReaction();\r\n      activeReaction.execute(move);\r\n      return true;\r\n    }\r\n\r\n    ...\r\n\r\n  }\r\n\r\n`;\r\n\r\nconst EvolutionMagic = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Mages, Spells and Buffs</div>\r\n      <p>\r\n        Fire, Cold, Shock, that's fantasyland right there. No surprises that I wanted Mages in my \r\n        Simulator.\r\n      </p>\r\n      <p>\r\n        I wanted to make the Mages as different as possible from any of the fighters that I have \r\n        come up with yet.\r\n      </p>\r\n      <p>First I wanted them to be independent of the Dexterity based system.</p>\r\n      <p>Also I didn't want my Mages to Punch and Kick like those common fighters.</p>\r\n      <div className=\"sectionTitle\">Spells and Spell Book</div>\r\n      <p>My Mages will just have 2 attributes. <em>Life</em> and <em>Mana</em>.</p>\r\n      <p>All Mages can do is cast Spells. Offensive and Defensive.</p>\r\n      <p>Mana is the fuel for all Spells and each Spell have a Cooldown associated with it.</p>\r\n      <p><em>Cooldown?</em></p>\r\n      <p>\r\n        Cooldown is the factor that will be the so called rhythm for the Mages. Spells can only be \r\n        cast if it is ready. Once casted, there is a cooldown period during which the Spell is not \r\n        ready (and hence can't be casted).\r\n      </p>\r\n      <p>\r\n        Defensive Spells are essentially some sort of a protective shield that defends against any \r\n        attack on the Mages.\r\n      </p>\r\n      <p>\r\n        Defensive Spells have an additional property called active which when casted, stays activated \r\n        for a certain duration and then dissipates.\r\n      </p>\r\n      <p>Again, and you must be tired of hearing this by now, <strong>Observer Pattern</strong>.</p>\r\n      <p>\r\n        Instead of having separate ActionStrategy and ReactionStrategy for selecting actions and \r\n        reactions from a list, as the logic for availability of Spells is embedded in the Spells \r\n        themselves, we have a SpellBook to deploy the Commands. This is modelled after <strong>Object \r\n          Pool Pattern</strong>.\r\n      </p>\r\n      <CodeSnippet code={codeSpellBook} />\r\n      <p><em>So what kind of damage does a Spell do?</em></p>\r\n      <p>Action Spells can deliver Fire, Cold or Shock Damage.</p>\r\n      <p>Reaction Spells can also deliver a feedback damage.</p>\r\n      <p>\r\n        For example, Elemental Mage can conjure up a Fire Shield which can burn anyone who attacks \r\n        the Mage.\r\n      </p>\r\n      <p>But these are all damages that can be reacted to.</p>\r\n      <p><em>What if there are moves that simply affects the fighter?</em></p>\r\n      <div className=\"sectionTitle\">Buffs</div>\r\n      <p>\r\n        Remember the additional effect of Cold Damage? It reduces the Dexterity for a certain \r\n        duration to slow the affected fighter.\r\n      </p>\r\n      <p>\r\n        Buffs are Moves which depending on the type of Buff, might affect any one or more attributes, \r\n        gradually or on-shot, in a temporary or permanent way.\r\n      </p>\r\n      <p>\r\n        In the last section a Super Power, Haste was mentioned. Haste results in a Buff which \r\n        Flash casts on self to boost his <em>Dexterity</em> for a short burst.\r\n      </p>\r\n      <p>Dark Mage has a couple of Buffs under his disposal.</p>\r\n      <p>\r\n        Most interesting of them being 'Attribute Steal' where one of opponent's Variable Attributes \r\n        is targeted and it's points siphoned out to fill up one of Dark Mage's Variable Attributes.\r\n      </p>\r\n      <p>\r\n        Batman has a myriad projectiles. While most of them are of the Damage type, few of them \r\n        deliver powerful Buffs too.\r\n      </p>\r\n      <Navigators prev=\"evolutionHeroes\" next=\"evolutionHits\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EvolutionMagic;"],"sourceRoot":""}