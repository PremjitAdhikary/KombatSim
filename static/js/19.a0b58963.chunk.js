(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{37:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(6),o=n(1),c=(n(38),function(e,t){return e?i.a.createElement(r.c,{className:"btn",to:Object(o.b)(e).path},t):i.a.createElement("span",{className:"btn-disabled"},t)});t.a=function(e){return i.a.createElement("div",{className:"navs"},i.a.createElement("span",{className:"left"},c(e.prev,"Previous")),i.a.createElement("span",{className:"right"},c(e.next,"Next")))}},38:function(e,t,n){},39:function(e,t,n){"use strict";var a=n(8),i=n(0),r=n.n(i),o=(n(40),["abstract","assert","boolean","break","byte","case","catch","char","class","const","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"]),c=["Override"],l=function(e){return e=function(e){var t=e;return c.forEach(function(e){return t=t.replace(new RegExp("@\\b"+e+"\\b","g"),'<span style="color: lightgray; font-weight: bold;">@'+e+"</span>")}),t}(e=function(e){var t=e;return o.forEach(function(e){return t=t.replace(new RegExp("\\b"+e+"\\b","g"),'<span style="color: yellow; font-weight: bold;">'+e+"</span>")}),t}(e=function(e){for(var t="",n=!0,a=0;a<e.length;a++)"\n"===e[a]?(t+="<br>",n=!0):n&&" "===e[a]?t+="&nbsp;":(n=!1,t+=e[a]);return t}(e=function(e){var t=e,n=t.match(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm);if(n){var i=Object(a.a)(n);i.forEach(function(e){return t=t.replace(e,'<span style="color: lightgray; font-style: italic;">'+e+"</span>")})}return t}(e))))};t.a=function(e){var t={__html:"<div id='pre'>"+l(e.code)+"</div>"};return r.a.createElement("div",{dangerouslySetInnerHTML:t})}},40:function(e,t,n){},62:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(6),o=n(1),c=n(37),l=n(39);t.default=function(){return i.a.createElement("div",{className:"main"},i.a.createElement("div",{className:"pageTitle"},"Lambda For Behavior"),i.a.createElement("p",null,"In Behavorial Patterns, subclasses hold different behaviors."),i.a.createElement("p",null,"Most of the times those subclasses have very minimal 'behavorial code'."),i.a.createElement("p",null,"With lambda, we can get rid of those pesky minimalist classes. By doing that, related logic can be kept in one place."),i.a.createElement("p",null,"We'll start with something simple ... ",i.a.createElement("strong",null,"Strategy Pattern"),"."),i.a.createElement("p",null,"For this we will look into our old friend ",i.a.createElement("code",null,"ShockDamage"),". Let's revisit the ",i.a.createElement(r.b,{to:Object(o.b)("evolutionDamages").path},"code")," again. Here is the ShockedActionStrategy."),i.a.createElement(l.a,{code:"\n\n  public class ShockedActionStrategy implements ActionStrategy {\n    ActionStrategy originalAction;\n    boolean blocked;\n\n    public ShockedActionStrategy(ActionStrategy originalAction) {\n      this.originalAction = originalAction;\n      this.blocked = true;\n    }\n\n    @Override\n    public void perform() {\n      if (!blocked) {\n        originalAction.perform();\n      }\n    }\n\n    public void unblock() {\n      this.blocked = false;\n    }\n\n  }\n\n"}),i.a.createElement("p",null,"And below is the ShockedReactionStrategy."),i.a.createElement("p",null,"Notice that in both the Strategies, the actual code to ",i.a.createElement("code",null,"perform()")," is minimal."),i.a.createElement(l.a,{code:"\n\n  public class ShockedReactionStrategy implements ReactionStrategy {\n    ReactionStrategy originalReaction;\n    boolean blocked;\n\n    ...\n\n    @Override\n    public void perform(Move move) {\n      if (!blocked) {\n        return originalReaction.perform(move);\n      }\n      return false;\n    }\n\n    ...\n\n  }\n\n"}),i.a.createElement("p",null,"Check in ",i.a.createElement("code",null,"ShockDamage"),", we have how on ",i.a.createElement("code",null,"affect()"),", the affected fighter's strategies are wrapped in ",i.a.createElement("code",null,"ShockedActionStrategy")," and ",i.a.createElement("code",null,"ShockedReactionStrategy")," to be unblocked once the shockDuration is over (from ",i.a.createElement("code",null,"update()"),")."),i.a.createElement(l.a,{code:"\n\n  public class ShockDamage implements Move, BeatObserver {\n    double damage;\n    int shockDuration;\n\n    Fighter fighter;\n    int beatCount;\n    ShockedActionStrategy shockAction;\n    ShockedReactionStrategy shockReaction;\n\n    ...\n\n    @Override\n    public void affect(Fighter fighter) {\n      this.fighter = fighter;\n      this.fighter.getLife().incrementCurrent(-damage);\n      shockAction = new ShockedActionStrategy(this.fighter.getActionStrategy());\n      this.fighter.setActionStrategy(shockAction);\n      shockReaction = new ShockedReactionStrategy(this.fighter.getReactionStrategy());\n      this.fighter.setReactionStrategy(shockReaction);\n      this.fighter.registerObserver(this);\n    }\n\n    @Override\n    public void update() {\n      if (beatCount == shockDuration) {\n        shockAction.unblock(); // restore ActionStrategy\n        shockReaction.unblock(); // restore ReactionStrategy\n        this.fighter.unregisterObserver(this);\n      } else {\n        beatCount++;\n      }\n    }\n\n  }\n\n"}),i.a.createElement("p",null,"With lambda to the rescue, look how we can get rid of ",i.a.createElement("em",null,"(a lot of)")," unnecessary code."),i.a.createElement("p",null,"Instead of having separate classes, we will reduce ",i.a.createElement("code",null,"ShockedActionStrategy")," and ",i.a.createElement("code",null,"ShockedReactionStrategy")," to mere one liners and in ",i.a.createElement("code",null,"ShockDamage")," itself."),i.a.createElement(l.a,{code:"\n\n  public class ShockDamage implements Move, BeatObserver {\n    double damage;\n    int shockDuration;\n\n    Fighter fighter;\n    int beatCount;\n    boolean blocked;\n    ActionStrategy originalAction;\n    ReactionStrategy originalReaction;\n\n    ...\n\n    @Override\n    public void affect(Fighter fighter) {\n      this.fighter = fighter;\n      this.fighter.getLife().incrementCurrent(-damage);\n\n      this.originalAction = this.fighter.getActionStrategy();\n      this.fighter.setActionStrategy(\n        // lambda action\n        () -> Optional.ofNullable(blocked ? null : originalAction)\n                .ifPresent(ActionStrategy::perform)\n      );\n      \n      this.originalReaction = this.fighter.getReactionStrategy();\n      this.fighter.setReactionStrategy(\n        // lambda reaction\n        move -> !blocked && originalReaction.perform(move)\n      );\n      \n      this.blocked = true;\n      this.fighter.registerObserver(this);\n    }\n\n    @Override\n    public void update() {\n      if (beatCount == shockDuration) {\n        this.blocked = false; // restore ActionStrategy and ReactionStrategy\n        this.fighter.unregisterObserver(this);\n      } else {\n        beatCount++;\n      }\n    }\n\n  }\n\n"}),i.a.createElement(c.a,{prev:"lambdaIntro",next:"lambdaCommand"}))}}}]);
//# sourceMappingURL=19.a0b58963.chunk.js.map