{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/evolution/EvolutionDamages.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","forEach","annot","replace","RegExp","openTag","processAnnotations","kw","processKeyword","lineStart","i","length","processIndentations","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","comment","processComments","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_1__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_2__","EvolutionDamages"],"mappings":"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","file":"static/js/11.4bf113fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst processIndentations = (someCode) => {\r\n  let processed = '';\r\n  let lineStart = true;\r\n  for (var i=0; i<someCode.length; i++) {\r\n    if (someCode[i] === '\\n') {\r\n      processed += '<br>';\r\n      lineStart = true;\r\n    } else if (lineStart && someCode[i] === ' ') {\r\n      processed += '&nbsp;';\r\n    } else {\r\n      lineStart = false;\r\n      processed += someCode[i];\r\n    }\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processComments(someCode);\r\n  someCode = processIndentations(someCode);\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  //const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  const preBlock = { __html: \"<div id='pre'>\" + someCode + \"</div>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeFire = `\r\n\r\n  public interface Move {\r\n    void affect(Fighter fighter);\r\n  }\r\n\r\n  public class FireDamage implements Move, BeatObserver {\r\n    double damage;\r\n    int burnDuration;\r\n    double burnDamage;\r\n\r\n    Fighter fighter;\r\n    int beatCount;\r\n\r\n    public FireDamage(double damage, int duration, double burnDamage) {\r\n      this.damage = damage;\r\n      this.burnDuration = duration;\r\n      this.burnDamage = burnDamage;\r\n    }\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n      this.fighter = fighter;\r\n      this.fighter.getLife().incrementCurrent(-damage);\r\n      this.fighter.registerObserver(this);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n      if (beatCount == burnDuration) {\r\n        this.fighter.unregisterObserver(this);\r\n      } else {\r\n        this.fighter.getLife().incrementCurrent(-burnDamage/burnDuration);\r\n        beatCount++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // setting it up\r\n  FireDamage fire = new FireDamage(damage, duration, burnDamage);\r\n  fire.affect(fighter);\r\n\r\n`;\r\n\r\nlet codeCold = `\r\n\r\n  public class ColdDamage implements Move, BeatObserver {\r\n    double damage;\r\n    int chillDuration;\r\n    double reduceDexterity;\r\n\r\n    Fighter fighter;\r\n    int beatCount;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n      this.fighter = fighter;\r\n      this.fighter.getLife().incrementCurrent(-damage);\r\n      this.fighter.getDexterity().increment(-reduceDexterity);\r\n      this.fighter.registerObserver(this);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n      if (beatCount == chillDuration) {\r\n        this.fighter.getDexterity().increment(reduceDexterity); // restore\r\n        this.fighter.unregisterObserver(this);\r\n      } else {\r\n        beatCount++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeShock = `\r\n\r\n  public class ShockedActionStrategy implements ActionStrategy {\r\n    ActionStrategy originalAction;\r\n    boolean blocked;\r\n\r\n    public ShockedActionStrategy(ActionStrategy originalAction) {\r\n      this.originalAction = originalAction;\r\n      this.blocked = true;\r\n    }\r\n\r\n    @Override\r\n    public void perform() {\r\n      if (!blocked) {\r\n        originalAction.perform();\r\n      }\r\n    }\r\n\r\n    public void unblock() {\r\n      this.blocked = false;\r\n    }\r\n\r\n  }\r\n\r\n  public class ShockedReactionStrategy implements ReactionStrategy {\r\n    ReactionStrategy originalReaction;\r\n    boolean blocked;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void perform(Move move) {\r\n      if (!blocked) {\r\n        return originalReaction.perform(move);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    ...\r\n\r\n  }\r\n\r\n  public class ShockDamage implements Move, BeatObserver {\r\n    double damage;\r\n    int shockDuration;\r\n\r\n    Fighter fighter;\r\n    int beatCount;\r\n    ShockedActionStrategy shockAction;\r\n    ShockedReactionStrategy shockReaction;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n      this.fighter = fighter;\r\n      this.fighter.getLife().incrementCurrent(-damage);\r\n      shockAction = new ShockedActionStrategy(this.fighter.getActionStrategy());\r\n      this.fighter.setActionStrategy(shockAction);\r\n      shockReaction = new ShockedReactionStrategy(this.fighter.getReactionStrategy());\r\n      this.fighter.setReactionStrategy(shockReaction);\r\n      this.fighter.registerObserver(this);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n      if (beatCount == shockDuration) {\r\n        shockAction.unblock(); // restore\r\n        shockReaction.unblock();\r\n        this.fighter.unregisterObserver(this);\r\n      } else {\r\n        beatCount++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nconst EvolutionDamages = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Other Damage Types</div>\r\n      <p>\r\n        Till now I have been blabbering about Hits and damage that it has on the fighter who gets \r\n        hit. These are physical in nature.\r\n      </p>\r\n      <p>A Punch or Kick causes physical damage to the opponent.</p>\r\n      <p>Here I will branch out into more forms of damage.</p>\r\n      <p>\r\n        <em>Why?</em> Because that gives out some additional variety and opens up new interesting \r\n        set of fighters.\r\n      </p>\r\n      <div className=\"sectionTitle\">Fire Damage</div>\r\n      <p>This type of damage, along with the initial damage at impact, also adds a burn damage.</p>\r\n      <p><em>What's burn damage?</em></p>\r\n      <p>\r\n        It's additional damage over time. So after the initial impact, for next n number of beats, \r\n        the fighter keeps on taking additional damage (burning).\r\n      </p>\r\n      <p>\r\n        <em>Implementation?</em> Again thanks to the Observer system that is in place now, it's a \r\n        piece of cake.\r\n      </p>\r\n      <p>\r\n        To burn, an Observer is registered to the fighter, which at each update decrements the life \r\n        of the affected fighter.\r\n      </p>\r\n      <p>At nth beat, the Observer unregisters itself from the fighter.</p>\r\n      <p>\r\n        Think of if as an opposite to the life Restorer concept, only with an expiry attached to \r\n        it.\r\n      </p>\r\n      <CodeSnippet code={codeFire} />\r\n      <div className=\"sectionTitle\">Cold Damage</div>\r\n      <p>\r\n        This type of damage chills the opponent along with the initial damage at impact. The effect \r\n        of chill is that the fighter is slowed down.\r\n      </p>\r\n      <p><em>How do I slow down a fighter?</em></p>\r\n      <p>\r\n        The fighter's rhythm is a function of the property Dexterity. So all I need to do is lower \r\n        the dexterity at impact and restore it after the duration of effect is over.\r\n      </p>\r\n      <p>Observer to the rescue! <em>Again!!</em></p>\r\n      <CodeSnippet code={codeCold} />\r\n      <div className=\"sectionTitle\">Shock Damage</div>\r\n      <p><em>What is a shock?</em></p>\r\n      <p>That which renders the fighter offenseless and defenseless.</p>\r\n      <p>\r\n        I hijack the Action and Reaction Strategy at impact and return it after the duration is \r\n        over.\r\n      </p>\r\n      <p>Observer + Strategy.</p>\r\n      <CodeSnippet code={codeShock} />\r\n      <Navigators prev=\"evolutionAdapter\" next=\"evolutionHeroes\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EvolutionDamages;"],"sourceRoot":""}