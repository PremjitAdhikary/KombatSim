{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/lambda/LambdaStrategy.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","forEach","comment","replace","processComments","annot","RegExp","openTag","processAnnotations","kw","processKeyword","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_3__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_4__","LambdaStrategy"],"mappings":"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","file":"static/js/19.368550cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  someCode = processComments(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeShockedAction = `\r\n\r\n  public class ShockedActionStrategy implements ActionStrategy {\r\n    ActionStrategy originalAction;\r\n    boolean blocked;\r\n\r\n    public ShockedActionStrategy(ActionStrategy originalAction) {\r\n      this.originalAction = originalAction;\r\n      this.blocked = true;\r\n    }\r\n\r\n    @Override\r\n    public void perform() {\r\n      if (!blocked) {\r\n        originalAction.perform();\r\n      }\r\n    }\r\n\r\n    public void unblock() {\r\n      this.blocked = false;\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeShockedReaction = `\r\n\r\n  public class ShockedReactionStrategy implements ReactionStrategy {\r\n    ReactionStrategy originalReaction;\r\n    boolean blocked;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void perform(Move move) {\r\n      if (!blocked) {\r\n        return originalReaction.perform(move);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    ...\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeShockDamage = `\r\n\r\n  public class ShockDamage implements Move, BeatObserver {\r\n    double damage;\r\n    int shockDuration;\r\n\r\n    Fighter fighter;\r\n    int beatCount;\r\n    ShockedActionStrategy shockAction;\r\n    ShockedReactionStrategy shockReaction;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n      this.fighter = fighter;\r\n      this.fighter.getLife().incrementCurrent(-damage);\r\n      shockAction = new ShockedActionStrategy(this.fighter.getActionStrategy());\r\n      this.fighter.setActionStrategy(shockAction);\r\n      shockReaction = new ShockedReactionStrategy(this.fighter.getReactionStrategy());\r\n      this.fighter.setReactionStrategy(shockReaction);\r\n      this.fighter.registerObserver(this);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n      if (beatCount == shockDuration) {\r\n        shockAction.unblock(); // restore ActionStrategy\r\n        shockReaction.unblock(); // restore ReactionStrategy\r\n        this.fighter.unregisterObserver(this);\r\n      } else {\r\n        beatCount++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeLambda = `\r\n\r\n  public class ShockDamage implements Move, BeatObserver {\r\n    double damage;\r\n    int shockDuration;\r\n\r\n    Fighter fighter;\r\n    int beatCount;\r\n    boolean blocked;\r\n    ActionStrategy originalAction;\r\n    ReactionStrategy originalReaction;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n      this.fighter = fighter;\r\n      this.fighter.getLife().incrementCurrent(-damage);\r\n\r\n      this.originalAction = this.fighter.getActionStrategy();\r\n      this.fighter.setActionStrategy(\r\n        // lambda action\r\n        () -> Optional.ofNullable(blocked ? null : originalAction)\r\n                .ifPresent(ActionStrategy::perform)\r\n      );\r\n      \r\n      this.originalReaction = this.fighter.getReactionStrategy();\r\n      this.fighter.setReactionStrategy(\r\n        // lambda reaction\r\n        move -> !blocked && originalReaction.perform(move)\r\n      );\r\n      \r\n      this.blocked = true;\r\n      this.fighter.registerObserver(this);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n      if (beatCount == shockDuration) {\r\n        this.blocked = false; // restore ActionStrategy and ReactionStrategy\r\n        this.fighter.unregisterObserver(this);\r\n      } else {\r\n        beatCount++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nconst LambdaStrategy = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Lambda For Behavior</div>\r\n      <p>\r\n        In Behavorial Patterns, subclasses hold different behaviors.\r\n      </p>\r\n      <p>\r\n        Most of the times those subclasses have very minimal 'behavorial code'.\r\n      </p>\r\n      <p>\r\n        With lambda, we can get rid of those pesky minimalist classes. By doing that, related logic \r\n        can be kept in one place.\r\n      </p>\r\n      <p>\r\n        We'll start with something simple ... <strong>Strategy Pattern</strong>.\r\n      </p>\r\n      <p>\r\n        For this we will look into our old friend <code>ShockDamage</code>. Let's revisit the <Link \r\n        to={getRoute('evolutionDamages').path}>code</Link> again. Here is the ShockedActionStrategy.\r\n      </p>\r\n      <CodeSnippet code={codeShockedAction} />\r\n      <p>\r\n        And below is the ShockedReactionStrategy.\r\n      </p>\r\n      <p>\r\n        Notice that in both the Strategies, the actual code to <code>perform()</code> is minimal. \r\n      </p>\r\n      <CodeSnippet code={codeShockedReaction} />\r\n      <p>\r\n        Check in <code>ShockDamage</code>, we have how on <code>affect()</code>, the affected fighter's \r\n        strategies are wrapped in <code>ShockedActionStrategy</code> and <code>ShockedReactionStrategy\r\n        </code> to be unblocked once the shockDuration is over (from <code>update()</code>).\r\n      </p>\r\n      <CodeSnippet code={codeShockDamage} />\r\n      <p>With lambda to the rescue, look how we can get rid of <em>(a lot of)</em> unnecessary code.</p>\r\n      <p>\r\n        Instead of having separate classes, we will reduce <code>ShockedActionStrategy</code> and <code>\r\n        ShockedReactionStrategy</code> to mere one liners and in <code>ShockDamage</code> itself.\r\n      </p>\r\n      <CodeSnippet code={codeLambda} />\r\n      <Navigators prev=\"lambdaIntro\" next=\"lambdaCommand\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LambdaStrategy;"],"sourceRoot":""}