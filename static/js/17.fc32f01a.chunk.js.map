{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/lambda/LambdaLoaner.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","forEach","annot","replace","RegExp","openTag","processAnnotations","kw","processKeyword","lineStart","i","length","processIndentations","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","comment","processComments","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_1__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_const_Routes__WEBPACK_IMPORTED_MODULE_3__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_4__","LambdaLoaner"],"mappings":"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","file":"static/js/17.fc32f01a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst processIndentations = (someCode) => {\r\n  let processed = '';\r\n  let lineStart = true;\r\n  for (var i=0; i<someCode.length; i++) {\r\n    if (someCode[i] === '\\n') {\r\n      processed += '<br>';\r\n      lineStart = true;\r\n    } else if (lineStart && someCode[i] === ' ') {\r\n      processed += '&nbsp;';\r\n    } else {\r\n      lineStart = false;\r\n      processed += someCode[i];\r\n    }\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processComments(someCode);\r\n  someCode = processIndentations(someCode);\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  //const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  const preBlock = { __html: \"<div id='pre'>\" + someCode + \"</div>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport Navigators from '../common/Navigators';\r\nimport {Link} from 'react-router-dom';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeAmateurFighters = `\r\n\r\n  public class AmateurFighters extends FighterFactory {\r\n\r\n    ...\r\n\r\n    @Override\r\n    public Fighter getFighter(\r\n        String fighterSubtype, ArenaMediator arena, String name) {\r\n      switch (fighterSubtype) {\r\n        case NERD:\r\n            return new AmateurFighterBuilder(arena, name, fighterSubtype)\r\n                        .withLife(20)\r\n                        .withStrength(10)\r\n                        .withDexterity(20)\r\n                        .withKick()\r\n                        .withEvade()\r\n                        .build();\r\n        case BULLY:\r\n            return new AmateurFighterBuilder(arena, name, fighterSubtype)\r\n                        .withLife(60)\r\n                        ...\r\n                        .build();\r\n        case CAPTAIN:\r\n            ...\r\n      }\r\n    }\r\n\r\n\r\n    // internal builder\r\n    private static class AmateurFighterBuilder {\r\n\r\n      ...\r\n\r\n      AmateurFighterBuilder(\r\n          ArenaMediator arena, String name, String fighterSubtype) {\r\n        ...\r\n      }\r\n\r\n      AmateurFighterBuilder withDexterity(double dexterity) {\r\n        this.dexterity = dexterity;\r\n        return this;\r\n      }\r\n\r\n      ...\r\n\r\n      Amateur build() {\r\n        Amateur fighter = new Amateur(name, arena, fighterSubtype);\r\n        fighter.addDexterity(dexterity);\r\n        ...\r\n        \r\n        if (punch)\r\n          fighter.addAction(new Punch(fighter));\r\n\r\n        ...\r\n\r\n        return fighter;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Setting it up\r\n  Fighter nerd = FighterFactory.getFactory(AmateurFighters.FACTORY)\r\n                    .getFighter(AmateurFighters.NERD, arena, \"Some Nerd\");\r\n\r\n`;\r\n\r\nlet codeFireDamage = `\r\n\r\n  public class FireDamage implements Move {\r\n\r\n    double damageAmount;\r\n    int burnDuration;\r\n    double burnDamage;\r\n\r\n    private FireDamage(double damage, int burnDuration, double burnDamage) {\r\n      this.damageAmount = damage;\r\n      this.burnDuration = burnDuration;\r\n      this.burnDamage = burnDamage;\r\n    }\r\n\r\n    @Override\r\n    public void affect(Fighter fighter) {\r\n\r\n    }\r\n    \r\n  }\r\n\r\n`;\r\n\r\nlet codeFireDamageBuilder = `\r\n\r\n  public static class FireDamageBuilder {\r\n\r\n    double min, max;\r\n    double damage;\r\n    int duration;\r\n\r\n    public FireDamageBuilder() {}\r\n\r\n    public FireDamageBuilder min(double m) {\r\n      this.min = m;\r\n      return this;\r\n    }\r\n\r\n    public FireDamageBuilder max(double m) {\r\n      this.max = m;\r\n      return this;\r\n    }\r\n\r\n    public FireDamageBuilder burnDamage(double d) { ... }\r\n\r\n    public FireDamageBuilder duration(int d) { ... }\r\n\r\n    public FireDamage build() {\r\n      FireDamage d = new FireDamage(randomDoubleInRange(min, max), duration, damage);\r\n    }\r\n  }\r\n\r\n  // usage\r\n  FireDamageBuilder builder = new FireDamageBuilder();\r\n  FireDamage fire = builder\r\n                        .min(10)\r\n                        .max(20)\r\n                        .duration(5)\r\n                        .burnDamage(8)\r\n                        .build();\r\n\r\n`;\r\n\r\nlet codeLambdaBuilder = `\r\n\r\n  public class FireDamage implements Move {\r\n    \r\n    ...\r\n\r\n    private FireDamage(double damage, int burnDuration, double burnDamage) { ... }\r\n\r\n    ...\r\n\r\n    public static FireDamage create(Consumer&lt;FireDamageBuilder&gt; block) {\r\n      FireDamageBuilder builder = new FireDamageBuilder();\r\n      block.accept(builder);\r\n      return builder.build();\r\n    }\r\n\r\n    public static class FireDamageBuilder {\r\n\r\n      ...\r\n\r\n      private FireDamageBuilder() {}\r\n\r\n      ...\r\n\r\n      private FireDamage build() { ... }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // usage\r\n  FireDamage fire = FireDamage.create(builder -> \r\n          builder\r\n            .min(10)\r\n            .max(20)\r\n            .duration(5)\r\n            .burnDamage(8)\r\n  );\r\n\r\n`;\r\n\r\nconst LambdaLoaner = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">A Builder on Loan?</div>\r\n      <p>\r\n        Yep, you read it right. It's a <em>Loan</em>(not lone) Builder.\r\n      </p>\r\n      <p>A Formal definition of the <strong>Loaner Pattern</strong> that I could find:</p>\r\n      <blockquote>\r\n      <p>\r\n        <em>When a pair of actions have to be taken together, you can use a HigherOrderFunction that \r\n        wraps the actions around the function that is passed in.</em>\r\n      </p>\r\n      </blockquote>\r\n      <p>\r\n        Done scratching your head? Allow me to dumb it down for you.\r\n      </p>\r\n      <p>\r\n        Let's go back to the <strong>Builder Pattern</strong> example from an <Link \r\n        to={getRoute('evolutionCreators').path}>earlier section</Link>.\r\n      </p>\r\n      <CodeSnippet code={codeAmateurFighters} />\r\n      <p>\r\n        The biggest advantage for having a Builder is the ease with which the object creation \r\n        happens. Instead of having to look into documentation for what goes in a constructor, the \r\n        builder just <em>flows</em>.\r\n      </p>\r\n      <p>\r\n        What if we try something similar for <code>FireDamage</code>?\r\n      </p>\r\n      <CodeSnippet code={codeFireDamage} />\r\n      <p>\r\n        In the FighterFactories, we have an internal builder which is only used by the outer Factory. \r\n        The Builder keeps the nitty-gritty of creating and setting up a Fighter to itself. The client \r\n        request and gets back a Fighter ready for action. Perfect encapsulation.\r\n      </p>\r\n      <p>\r\n        But may I remind you that FireDamage gets instantiated from multiple places with dynamic \r\n        values! <em>A private builder is out of the question!!!</em>\r\n      </p>\r\n      <CodeSnippet code={codeFireDamageBuilder} />\r\n      <p>\r\n        So what if we have an exposed builder?\r\n      </p>\r\n      <p>\r\n        Well, the client can now reuse the builder.\r\n      </p>\r\n      <p>\r\n        While fine for our <code>FireDamageBuilder</code>, not so cool if the builder has 100s of \r\n        properties setup. That's a bug cultivator!\r\n      </p>\r\n      <p>\r\n        That's where <strong>Loaner Pattern</strong> comes into the picture!\r\n      </p>\r\n      <p>\r\n        Here's what you do.\r\n      </p>\r\n      <ul>\r\n        <li>Make <code>FireDamageBuilder</code> an inner class of <code>FireDamage</code>.</li>\r\n        <li>Make the constructor and the build() method of the builder private.</li>\r\n        <li>Add static method create() to <code>FireDamage</code> which loans the builder.</li>\r\n      </ul>\r\n      <CodeSnippet code={codeLambdaBuilder} />\r\n      <p>\r\n        No more shared builder. You get a builder on loan, you set it up and that's it!\r\n      </p>\r\n      <Navigators prev=\"lambdaDecorator\" next=\"lambdaBuilder\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LambdaLoaner;"],"sourceRoot":""}