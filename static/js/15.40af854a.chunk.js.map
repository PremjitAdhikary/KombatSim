{"version":3,"sources":["components/common/Navigators.js","components/common/CodeSnippet.js","components/lambda/LambdaCommand.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_const_Routes__WEBPACK_IMPORTED_MODULE_2__","getContent","pathKey","text","a","createElement","className","to","getRoute","path","Navigators","props","prev","next","keywords","annotations","parseAndTag","someCode","processed","matches","match","comments","Object","C_DataBox_Creative_code_workspace_KombatSim_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","forEach","comment","replace","processComments","annot","RegExp","openTag","processAnnotations","kw","processKeyword","CodeSnippet","preBlock","__html","code","react__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","r","__webpack_exports__","_common_Navigators__WEBPACK_IMPORTED_MODULE_3__","_common_CodeSnippet__WEBPACK_IMPORTED_MODULE_4__","LambdaCommand"],"mappings":"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","file":"static/js/15.40af854a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport './Navigators.css';\r\n\r\nconst Navigators = (props) => {\r\n  return (\r\n    <div className=\"navs\">\r\n      <span className=\"left\">\r\n        {getContent(props.prev, 'Previous')}\r\n      </span>\r\n      <span className=\"right\">\r\n        {getContent(props.next, 'Next')}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigators.propTypes = {\r\n  prev: PropTypes.string,\r\n  next: PropTypes.string\r\n};\r\n\r\nlet getContent = (pathKey, text) => {\r\n  if (pathKey) {\r\n    return <NavLink className=\"btn\" to={getRoute(pathKey).path}>{text}</NavLink>;\r\n  } else {\r\n    return <span className=\"btn-disabled\">{text}</span>;\r\n  }\r\n}\r\n\r\nexport default Navigators;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CodeSnippet.css';\r\n\r\nconst keywordColor = 'yellow';\r\nconst keywords = [\r\n  'abstract', 'assert', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const',\r\n  'do', 'double', 'else', 'enum', 'extends', 'final', 'finally', 'float', 'for', 'goto', 'if',\r\n  'implements', 'import', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'package',\r\n  'private', 'protected', 'public', 'return', 'short', 'static', 'strictfp', 'super', 'switch',\r\n  'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile', 'while',\r\n  'true', 'false', 'null'\r\n];\r\nconst annotationColor = 'lightgray';\r\nconst annotations = ['Override'];\r\nconst commentColor = 'lightgray';\r\nconst closeTag = '</span>';\r\n\r\nconst processKeyword = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+keywordColor+'; font-weight: bold;\">';\r\n  keywords.forEach(kw => \r\n    processed = processed.replace(\r\n                            new RegExp('\\\\b'+kw+'\\\\b', 'g'), \r\n                            openTag+kw+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processAnnotations = (someCode) => {\r\n  let processed = someCode;\r\n  let openTag = '<span style=\"color: '+annotationColor+'; font-weight: bold;\">';\r\n  annotations.forEach(annot => \r\n    processed = processed.replace(\r\n                            new RegExp('@\\\\b'+annot+'\\\\b', 'g'), \r\n                            openTag+'@'+annot+closeTag\r\n  ));\r\n  return processed;\r\n};\r\n\r\nconst processComments = (someCode) => {\r\n  let processed = someCode;\r\n  // picks out single line comments starting with // and enclosed in /* */, \r\n  // and multiline comments too\r\n  let regexp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\r\n  let matches = processed.match(regexp);\r\n  if (matches) {\r\n    let comments = [...matches];\r\n    let openTag = '<span style=\"color: '+commentColor+'; font-style: italic;\">';\r\n    comments.forEach(\r\n      comment => processed = processed.replace(comment, openTag+comment+closeTag)\r\n    );\r\n  }\r\n  return processed;\r\n};\r\n\r\nconst parseAndTag = (someCode) => {\r\n  someCode = processKeyword(someCode);\r\n  someCode = processAnnotations(someCode);\r\n  someCode = processComments(someCode);\r\n  return someCode;\r\n};\r\n\r\nconst CodeSnippet = (props) => {\r\n  let someCode = parseAndTag(props.code);\r\n  const preBlock = { __html: \"<pre>\" + someCode + \"</pre>\" };\r\n  return <div dangerouslySetInnerHTML={ preBlock }></div>;\r\n};\r\n\r\nCodeSnippet.propTypes = {\r\n  code: PropTypes.string\r\n};\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport  {getRoute} from '../../const/Routes';\r\nimport Navigators from '../common/Navigators';\r\nimport CodeSnippet from '../common/CodeSnippet';\r\n\r\nlet codeAbstractMojoAction = `\r\n\r\n  public abstract class MojoBasedAction implements ActionCommand {\r\n    Hero fighter;\r\n    double mojoCost;\r\n    String name;\r\n    ...\r\n    \r\n    public MojoBasedAction(Hero fighter, String name, double mojoCost) {\r\n      ...\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n      chargeMojo();\r\n      Move move = calculateMove();\r\n      sendMove(move);\r\n    }\r\n\r\n    protected void chargeMojo() {\r\n      this.fighter.getMojo().incrementMojo(-mojoCost);\r\n    }\r\n\r\n    protected void sendMove(Move move) {\r\n      // send move to the arena\r\n    }\r\n\r\n    protected abstract Move calculateMove();\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeConcreteMojoAction = `\r\n\r\n  public class HeatVision extends MojoBasedAction {\r\n    ...\r\n\r\n    public HeatVision(Hero fighter, String name, double mojoCost) {\r\n      super(fighter, name, mojoCost);\r\n      ...\r\n    }\r\n    \r\n    @Override\r\n    protected Move calculateMove() {\r\n      return new FireDamage(damage, duration, burnDamage);\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeMojoAction = `\r\n\r\n  public class MojoBasedAction implements ActionCommand {\r\n    Hero fighter;\r\n    double mojoCost;\r\n    String name;\r\n    Supplier&lt;Move&gt; calculateMove;\r\n    ...\r\n    \r\n    public MojoBasedAction(Hero fighter, String name, \r\n        double mojoCost, Supplier&lt;Move&gt; calculateMove) {\r\n      ...\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n      chargeMojo();\r\n      Move move = calculateMove.get();\r\n      sendMove(move);\r\n    }\r\n\r\n    ... // chargeMojo() and sendMove(move) stays the same\r\n\r\n  }\r\n\r\n`;\r\n\r\nlet codeHeat = `\r\n\r\n  MojoBasedAction heatVision = new MojoBasedAction(\r\n    fighter, \r\n    \"Heat Vision\", \r\n    cost, \r\n    () -> new FireDamage(damage, duration, burnDamage)\r\n  );\r\n\r\n`;\r\n\r\nlet codeLambda = `\r\n  \r\n  MojoBasedAction freezeBreath = new MojoBasedAction(\r\n    fighter, \r\n    \"Freeze Breath\", \r\n    cost, \r\n    () -> new ColdDamage(damage, duration, reduceDexterity)\r\n  );\r\n  \r\n  MojoBasedAction arcLightning = new MojoBasedAction(\r\n    fighter, \r\n    \"Arc Lightning\", \r\n    cost, \r\n    () -> new ShockDamage(damage, duration)\r\n  );\r\n\r\n`;\r\n\r\nconst LambdaCommand = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"pageTitle\">Lambda For Command</div>\r\n      <p>\r\n        We saw how lambda can help redefine the implementation of <strong>Strategy \r\n        Pattern</strong>. Who say's we are just limited to that?\r\n      </p>\r\n      <p>\r\n        Let's visit <Link to={getRoute('evolutionDecorator').path}>MojoBasedAction</Link> from \r\n        earlier.\r\n      </p>\r\n      <CodeSnippet code={codeAbstractMojoAction} />\r\n      <p>\r\n        And here we have it's subclass <code>HeatVision</code>.\r\n      </p>\r\n      <CodeSnippet code={codeConcreteMojoAction} />\r\n      <p>\r\n        Notice the similarity with the last section? Lot of plumbing to flesh out a different \r\n        behavior.\r\n      </p>\r\n      <p>\r\n        We know what to do. But how?\r\n      </p>\r\n      <p>\r\n        First we promote <code>MojoBasedAction</code> from an abstract to a concrete class. Then \r\n        we add a <code>Supplier</code> to it. And finally remove that annoying abstract \r\n        method <code>calculateMove()</code>.\r\n      </p>\r\n      <CodeSnippet code={codeMojoAction} />\r\n      <p>\r\n        Now we rewrite HeatVision as follows:\r\n      </p>\r\n      <CodeSnippet code={codeHeat} />\r\n      <p>\r\n        That's it! We keep passing different suppliers to get different actions.\r\n      </p>\r\n      <p>\r\n        We have successfully reduced full-fledged subclasses to mere instantiations!\r\n      </p>\r\n      <CodeSnippet code={codeLambda} />\r\n      <p>\r\n        Same idea is extended to other commands like <code>ActionSpell</code> and <code>\r\n        ReactionSpell</code>.\r\n      </p>\r\n      <Navigators prev=\"lambdaStrategy\" next=\"lambdaDecorator\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LambdaCommand;"],"sourceRoot":""}